[{"id":"43e8af136f4d0fbe","type":"tab","label":"[.docu] link call Erlang architecture","disabled":false,"info":"## Link call node - dynamic target\n\nLink nodes connect different parts of flows together. They are the wormholes of flow based programming. These nodes emulate `goto` / `gosub` / `return` in other languages.\n\nThere are three nodes:\n\n- `link in` node defines a target point. It can be anywhere in a flow, connected to the input port of a node or multiple nodes.\n- `link call` re-routes an Erlang-Red message to a link-in node and waits until the message is returned to it. Once the Erlang-Red message comes back, the link-call node passes the message onto all nodes connected to it.\n- `link out` has two functions. The first function is to re-route Erlang-Red messages to specific link-in nodes. These are targets are static. The second function it has is to return Erlang-Red messages to link-call nodes. If a message arrives at a link-out node and it is marked as having come from a link-call node, then it is returned to that link-call node.\n\n## Flowchart\n\n```mermaid\n%% Generated by the Flow2UML Node @ https://flowhub.org/flow2uml\n%% change direction to LR for Node-RED left-to-right UML\ngraph TB\n67c1dc8a33b80e8a@{ shape: \"rect\", label: \"function 1 \\n &lt;ered_node_function&gt;\" } -. \"**#40;7#41;** ered_nodes:send_msg_to_connected_nodes#47;2\" .-> 2b15aad9c90469eb@{ shape: \"stadium\", label: \"#35;#123;Msg#125;\" }\ne33d87ec3cc38aca@{ shape: \"rect\", label: \"ered_node_inject \\n &lt;ered_node&gt;\" } -. \"**#40;1#41;** ered_msg_handling:create_outgoing_msg#47;1\" .-> e6eab90d2828637c@{ shape: \"stadium\", label: \"#35;#123;Msg#125;\" }\n96a8c3ef5146bfea@{ shape: \"st-rect\", label: \"system \\n &lt;ered_nodes.erl&gt;\" } -- \"**#40;i1#41;** handle_event#40;#123;registered#125;#41;#47;2\" --> 43b13b720475d9c2@{ shape: \"rect\", label: \"link in node \\n &lt;ered_node_link_in&gt;\" }\n43b13b720475d9c2@{ shape: \"rect\", label: \"link in node \\n &lt;ered_node_link_in&gt;\" } -- \"**#40;i2#41;** ered_link_node_exchange:register_link_in#47;3\" --> 7a076cbf3b2b4e25@{ shape: \"cyl\", label: \"ered_link_node_exchange \\n &lt;ered_link_node_exchange&gt;\" }\n43b13b720475d9c2@{ shape: \"rect\", label: \"link in node \\n &lt;ered_node_link_in&gt;\" } -. \"**#40;6#41;** ered_nodes:send_msg_to_connected_nodes#47;2\" .-> 67c1dc8a33b80e8a@{ shape: \"rect\", label: \"function 1 \\n &lt;ered_node_function&gt;\" }\ne6eab90d2828637c@{ shape: \"stadium\", label: \"#35;#123;Msg#125;\" } -. \"**#40;2#41;** #123;incoming, Msg#125;\" .-> 8e133d66e6af0eed@{ shape: \"rect\", label: \"link call &lt;ered_node_link_call&gt;\" }\n8e133d66e6af0eed@{ shape: \"rect\", label: \"link call &lt;ered_node_link_call&gt;\" } <-- \"**#40;3#41;** ered_link_node_exchange:obtain_link_node_pid#47;2\" --> 7a076cbf3b2b4e25@{ shape: \"cyl\", label: \"ered_link_node_exchange \\n &lt;ered_link_node_exchange&gt;\" }\n8e133d66e6af0eed@{ shape: \"rect\", label: \"link call &lt;ered_node_link_call&gt;\" } -. \"**#40;5#41;** ered_nodes:send_msg_on_by_pids#47;2\" .-> 43b13b720475d9c2@{ shape: \"rect\", label: \"link in node \\n &lt;ered_node_link_in&gt;\" }\n8e133d66e6af0eed@{ shape: \"rect\", label: \"link call &lt;ered_node_link_call&gt;\" } <-- \"**#40;4#41;** maps:put#40;'_link_source'#41;\" --> e6eab90d2828637c@{ shape: \"stadium\", label: \"#35;#123;Msg#125;\" }\n8e133d66e6af0eed@{ shape: \"rect\", label: \"link call &lt;ered_node_link_call&gt;\" } -. \"**#40;12#41;** ered_nodes:send_msg_to_connected_nodes#47;2\" .-> 3b1ca50e8775f40a@{ shape: \"rect\", label: \"debug 1 \\n &lt;ered_node_debug&gt;\" }\n2b65b28816d41ab4@{ shape: \"rect\", label: \"link out node \\n &lt;ered_node_link_out&gt;\" } -- \"**#40;9#41;** maps:find#40;'_linkSource', Msg#41;\" --> 2b15aad9c90469eb@{ shape: \"stadium\", label: \"#35;#123;Msg#125;\" }\n2b65b28816d41ab4@{ shape: \"rect\", label: \"link out node \\n &lt;ered_node_link_out&gt;\" } -. \"**#40;11#41;** ! #123;link_return, Msg#125;\" .-> 8e133d66e6af0eed@{ shape: \"rect\", label: \"link call &lt;ered_node_link_call&gt;\" }\n2b15aad9c90469eb@{ shape: \"stadium\", label: \"#35;#123;Msg#125;\" } -. \"**#40;8#41;** #123;incoming, Msg#125;\" .-> 2b65b28816d41ab4@{ shape: \"rect\", label: \"link out node \\n &lt;ered_node_link_out&gt;\" }\n2b15aad9c90469eb@{ shape: \"stadium\", label: \"#35;#123;Msg#125;\" } -- \"**#40;10#41;** maps:put#40;'_linkSource', Msg#41;\" --> 2b65b28816d41ab4@{ shape: \"rect\", label: \"link out node \\n &lt;ered_node_link_out&gt;\" }\n```\n\n## Code\n\n- [ered_node_link_call.erl]()\n- [ered_node_link_in.erl]()\n- [ered_node_link_out.erl]()\n- [ered_link_node_exchange.erl]()\n\n\n","env":[]},{"id":"878d585afede5275","type":"inject","z":"43e8af136f4d0fbe","name":"","props":[{"p":"target","v":"fubar","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":277,"y":304.5,"wires":[["f97d0c67ab746be4"]]},{"id":"f97d0c67ab746be4","type":"link call","z":"43e8af136f4d0fbe","name":"link call","links":[],"linkType":"dynamic","timeout":"30","x":631,"y":302.5,"wires":[["d32e71dcb398fd64"]]},{"id":"62036c28fc6fd5af","type":"link in","z":"43e8af136f4d0fbe","name":"fubar","links":["9921e47955df4702"],"x":438,"y":410.5,"wires":[["20fc9c564df9c187"]]},{"id":"20fc9c564df9c187","type":"function","z":"43e8af136f4d0fbe","name":"function 1","func":"%% Code here is wrapped in a fun (Msg) call\n%% fun (Msg) ->\n    Msg\n%% end.\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":672,"y":410.5,"wires":[["4d9422ed179e61b6"]]},{"id":"4d9422ed179e61b6","type":"link out","z":"43e8af136f4d0fbe","name":"link out 1","mode":"link","links":[],"x":898,"y":409.5,"wires":[]},{"id":"d32e71dcb398fd64","type":"debug","z":"43e8af136f4d0fbe","name":"debug 1","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1058,"y":299,"wires":[]}]