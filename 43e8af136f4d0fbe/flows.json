[{"id":"43e8af136f4d0fbe","type":"tab","label":"[.docu] link call Erlang architecture","disabled":false,"info":"<script>\n$(function(){\n    $('#flowtitle').html($('#flowtitle').text().replace(\"[.docu]\",\"\"));\n})\n</script>\n\n<small><i>[Share](https://flows.red-erik.org/f/43e8af136f4d0fbe)</i></small>\n\n## Link call node - dynamic target\n\nLink nodes connect different parts of flows together. They are the wormholes of flow based programming. These nodes emulate `goto` / `gosub` / `return` in other languages.\n\nThere are three nodes:\n\n- `link in` node defines a target point. It can be anywhere in a flow, connected to the input port of a node or multiple nodes.\n- `link call` re-routes an Erlang-Red message to a link-in node and waits until the message is returned to it. Once the Erlang-Red message comes back, the link-call node passes the returned message onto all nodes connected to it. It passes the Erlang-Red message it receives as incoming message to the link-in node, unaltered. Whatever comes back, is passed unaltered to the nodes connected to it.\n- `link out` has two functionalities. The first function is to re-route Erlang-Red messages to specific link-in nodes. These are targets are static. The second function it has is to return Erlang-Red messages to link-call nodes. If a message arrives at a link-out node and it is marked as having come from a link-call node, then it is returned to that link-call node.\n\nA link-call node can be used to either dynamic mode or static mode. This description is focussed on the dynamic mode.\n\nDynamic mode means that the link-in node to which the Erlang-Red message is sent is determined by the value of the `target` attribute of the message. That can either be the name of the link-in node or its node id. In this case, we are using the name `fubar`. The <a class=\"ahl-node-only\" data-ids=\"878d585afede5275\">inject</a> node sets that value.\n\n## Terminology\n\nIn the flow-chart:\n\n- rectangles are Erlang processes\n- solid arrows are function calls that create processes\n- dotted arrows are Erlang messages being sent between processes\n- the oval `#{Msg}` is just a map containing the Erlang-Red message data\n- the sequence of events is highlighted by numbered prefixes: **(1)**, **(2)**, ...\n\nThe \"system\" is simply the running instance of Erlang-Red.\n\nErlang Messages are not to be confused with Erlang-Red messages. Erlang-Red messages are maps that are passed between nodes, Erlang messages are (mostly) tuples passed between Erlang processes.\n\n## Flowcharts\n\n### Initialisation of the link-in nodes\n\nInitialisation of the <a class=\"ahl-node-only\" data-ids=\"62036c28fc6fd5af\">link-in</a> node. At start up time, all link-in nodes register with the centralised `ered_link_node_exchange` module.\n\n```mermaid\n%% Generated by the Flow2UML Node @ https://flowhub.org/flow2uml\n%% change direction to LR for Node-RED left-to-right UML\ngraph RL\n96a8c3ef5146bfea@{ shape: \"st-rect\", label: \"system \\n &lt;ered_nodes.erl&gt;\" } -- \"handle_event#40;#123;registered#125;#41;#47;2\" --> 96e2e43870db30c7@{ shape: \"rect\", label: \"link in node \\n &lt;ered_node_link_in&gt;\" }\n96e2e43870db30c7@{ shape: \"rect\", label: \"link in node \\n &lt;ered_node_link_in&gt;\" } -- \"ered_link_node_exchange:register_link_in#47;3\" --> 66abe9b3d7951c38@{ shape: \"cyl\", label: \"ered_link_node_exchange \\n &lt;ered_link_node_exchange&gt;\" }\nsubgraph \"start up time\"\n96a8c3ef5146bfea\n96e2e43870db30c7\n66abe9b3d7951c38\nend\n```\n\nThe link node exchange creates a lookup table with link-in node names and node ids mapped to their corresponding Erlang process ids. For each link-in node, two [pg](https://www.erlang.org/doc/apps/kernel/pg.html) groups are created.\n\n### Inject triggering message to the link-call node\n\nThe first half of the <a class=\"ahl-group-only\" data-ids=\"dc1f1434a48fcc1a\">link call flow</a> is represented by the following flowchart. It describes the interaction between the <a class=\"ahl-node-only\" data-ids=\"878d585afede5275\">inject</a> node and the <a class=\"ahl-node-only\" data-ids=\"f97d0c67ab746be4\">link call</a> node.\n\n```mermaid\n%% Generated by the Flow2UML Node @ https://flowhub.org/flow2uml\n%% change direction to LR for Node-RED left-to-right UML\ngraph TB\ne33d87ec3cc38aca@{ shape: \"rect\", label: \"ered_node_inject \\n &lt;ered_node&gt;\" } -. \"**#40;1#41;** ered_messages:create_outgoing_msg#47;1\" .-> e6eab90d2828637c@{ shape: \"stadium\", label: \"#35;#123;Msg#125;\" }\ne6eab90d2828637c@{ shape: \"stadium\", label: \"#35;#123;Msg#125;\" } -. \"**#40;2#41;** #123;incoming, Msg#125;\" .-> 8e133d66e6af0eed@{ shape: \"rect\", label: \"link call &lt;ered_node_link_call&gt;\" }\n8e133d66e6af0eed@{ shape: \"rect\", label: \"link call &lt;ered_node_link_call&gt;\" } <-- \"**#40;3#41;** ered_link_node_exchange:obtain_link_node_pid#47;2\" --> 7a076cbf3b2b4e25@{ shape: \"cyl\", label: \"ered_link_node_exchange \\n &lt;ered_link_node_exchange&gt;\" }\n8e133d66e6af0eed@{ shape: \"rect\", label: \"link call &lt;ered_node_link_call&gt;\" } <-- \"**#40;4#41;** maps:put#40;'_link_source'#41;\" --> e6eab90d2828637c@{ shape: \"stadium\", label: \"#35;#123;Msg#125;\" }\n8e133d66e6af0eed@{ shape: \"rect\", label: \"link call &lt;ered_node_link_call&gt;\" } -. \"**#40;5#41;** ered_nodes:send_msg_on_by_pids#47;2\" .-> 0403088d0d9bebe6@{ shape: \"rect\", label: \"link in node \\n &lt;ered_node_link_in&gt;\" }\nsubgraph \"link call flow\"\ne33d87ec3cc38aca\ne6eab90d2828637c\n8e133d66e6af0eed\nend\n```\n\nSteps:\n\n- in **(1)** the inject node generates an outgoing message map `#{Msg}`. The initial contents are defined in the <a class=\"ahl-node-only\" data-ids=\"878d585afede5275\">inject</a> node.\n\n- **(2)** the generated Erlang-Red outgoing message is passed to the link-call node as an incoming message.\n\n- **(3)** the <a class=\"ahl-node-only\" data-ids=\"f97d0c67ab746be4\">link call</a> being set to dynamic mode, retrieves the value of the `target` attribute from the `#{Msg}` and retrieves the corresponding link-in node process id from the `ered_link_node_exchange`.\n\n- **(4)** the link-call node updates the `_linkSource` array with it details so that a message can be returned to the link call node.\n\n- **(5)** link-call node sends the Erlang-Red message it received from the inject node to the link-in node via the `{incoming, Msg}` Erlang message. \n\nThe following flowchart describes the handling of that Erlang-Red message.\n\n### Link-in node handling the Erlang-Red message it receives\n\nFor the <a class=\"ahl-group-only\" data-ids=\"3a059b27f7145036\">link in flow</a>\n\n```mermaid\n%% Generated by the Flow2UML Node @ https://flowhub.org/flow2uml\n%% change direction to LR for Node-RED left-to-right UML\ngraph BT\n67c1dc8a33b80e8a@{ shape: \"rect\", label: \"function 1 \\n &lt;ered_node_function&gt;\" } -. \"**#40;7#41;** ered_nodes:send_msg_to_connected_nodes#47;2\" .-> 2b15aad9c90469eb@{ shape: \"stadium\", label: \"#35;#123;Msg#125;\" }\n43b13b720475d9c2@{ shape: \"rect\", label: \"link in node \\n &lt;ered_node_link_in&gt;\" } -. \"**#40;6#41;** ered_nodes:send_msg_to_connected_nodes#47;2\" .-> 67c1dc8a33b80e8a@{ shape: \"rect\", label: \"function 1 \\n &lt;ered_node_function&gt;\" }\n2b65b28816d41ab4@{ shape: \"rect\", label: \"link out node \\n &lt;ered_node_link_out&gt;\" } -- \"**#40;9#41;** maps:find#40;'_linkSource', Msg#41;\" --> 2b15aad9c90469eb@{ shape: \"stadium\", label: \"#35;#123;Msg#125;\" }\n2b15aad9c90469eb@{ shape: \"stadium\", label: \"#35;#123;Msg#125;\" } -. \"**#40;8#41;** #123;incoming, Msg#125;\" .-> 2b65b28816d41ab4@{ shape: \"rect\", label: \"link out node \\n &lt;ered_node_link_out&gt;\" }\n2b15aad9c90469eb@{ shape: \"stadium\", label: \"#35;#123;Msg#125;\" } -- \"**#40;10#41;** maps:put#40;'_linkSource', Msg#41;\" --> 2b65b28816d41ab4@{ shape: \"rect\", label: \"link out node \\n &lt;ered_node_link_out&gt;\" }\nsubgraph \"link in flow\"\n67c1dc8a33b80e8a\n43b13b720475d9c2\n2b65b28816d41ab4\n2b15aad9c90469eb\nend\n```\n\nSteps:\n\n- **(6)** the <a class=\"ahl-node-only\" data-ids=\"62036c28fc6fd5af\">link in</a> node having received the message from the link call node, passes that message on to all the nodes connected to it\n\n- **(7)** the <a class=\"ahl-node-only\" data-ids=\"20fc9c564df9c187\">function node</a>, having made its modifications to the message, passes the modified `#{Msg}` map to all its connected nodes\n\n- **(8)** the <a class=\"ahl-node-only\" data-ids=\"4d9422ed179e61b6\">link out</a> node, being in return mode will return the `#{Msg}` to the link call node. The link call node retrieves the `_linkSource` array **(9)** to discover the link-call node to which it should send the message back to\n\n- **(10)** the link-out node alters the `_linkSource` array and removes the node details of the link-call node it will send the message to\n\nNot shown on the flow chart is the final step and that the link out node sending the message back to the link call node, that is shown in the final flow chart:\n\n### Message returned to the link-call node\n\n```mermaid\n%% Generated by the Flow2UML Node @ https://flowhub.org/flow2uml\n%% change direction to LR for Node-RED left-to-right UML\ngraph TB\n19ebc84b30e82835@{ shape: \"rect\", label: \"link call &lt;ered_node_link_call&gt;\" } -. \"**#40;12#41;** ered_nodes:send_msg_to_connected_nodes#47;2\" .-> 581a7a483f93f7ea@{ shape: \"rect\", label: \"debug 1 \\n &lt;ered_node_debug&gt;\" }\n1c4d4c55ed0ad1ca@{ shape: \"rect\", label: \"link out node \\n &lt;ered_node_link_out&gt;\" } -. \"**#40;11#41;** ! #123;link_return, Msg#125;\" .-> 19ebc84b30e82835@{ shape: \"rect\", label: \"link call &lt;ered_node_link_call&gt;\" }\n```\n\nSteps \n\n- **(11)** using the `{link_return, #{Msg}}` Erlang message, the link-out node returns the altered Erlang-Red message to the link-call node\n\n- **(12)** final step is the link-call node passing the message on to all the nodes connected to it, in this case the <a class=\"ahl-node-only\" data-ids=\"d32e71dcb398fd64\">debug</a> node\n\nThe message is then dumped into the debug panel and finally drop to the server floor. QED.\n\n## Code\n\n- [ered_node_link_call.erl](https://github.com/gorenje/erlang-red/blob/ac0bcc5c50eb438c69b5cfa754a5ab264148a8b9/src/nodes/ered_node_link_call.erl)\n- [ered_node_link_in.erl](https://github.com/gorenje/erlang-red/blob/ac0bcc5c50eb438c69b5cfa754a5ab264148a8b9/src/nodes/ered_node_link_in.erl)\n- [ered_node_link_out.erl](https://github.com/gorenje/erlang-red/blob/ac0bcc5c50eb438c69b5cfa754a5ab264148a8b9/src/nodes/ered_node_link_out.erl)\n- [ered_link_node_exchange.erl](https://github.com/gorenje/erlang-red/blob/ac0bcc5c50eb438c69b5cfa754a5ab264148a8b9/src/exchanges/ered_link_node_exchange.erl)\n\n\n","env":[]},{"id":"3a059b27f7145036","type":"group","z":"43e8af136f4d0fbe","name":"link in flow","style":{"label":true},"nodes":["62036c28fc6fd5af","20fc9c564df9c187","4d9422ed179e61b6"],"x":377,"y":388.5,"w":542,"h":83},{"id":"dc1f1434a48fcc1a","type":"group","z":"43e8af136f4d0fbe","name":"link call flow","style":{"label":true},"nodes":["878d585afede5275","f97d0c67ab746be4","d32e71dcb398fd64"],"x":341,"y":247.89285278320312,"w":643,"h":82},{"id":"878d585afede5275","type":"inject","z":"43e8af136f4d0fbe","g":"dc1f1434a48fcc1a","name":"","props":[{"p":"target","v":"fubar","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":437,"y":288.8928527832031,"wires":[["f97d0c67ab746be4"]]},{"id":"f97d0c67ab746be4","type":"link call","z":"43e8af136f4d0fbe","g":"dc1f1434a48fcc1a","name":"link call","links":[],"linkType":"dynamic","timeout":"30","x":631,"y":288.8928527832031,"wires":[["d32e71dcb398fd64"]]},{"id":"62036c28fc6fd5af","type":"link in","z":"43e8af136f4d0fbe","g":"3a059b27f7145036","name":"fubar","links":[],"x":418,"y":430.5,"wires":[["20fc9c564df9c187"]]},{"id":"20fc9c564df9c187","type":"function","z":"43e8af136f4d0fbe","g":"3a059b27f7145036","name":"function 1","func":"%% Code here is wrapped in a fun (Msg) call\n%% fun (Msg) ->\n    Msg\n%% end.\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":652,"y":430.5,"wires":[["4d9422ed179e61b6"]]},{"id":"4d9422ed179e61b6","type":"link out","z":"43e8af136f4d0fbe","g":"3a059b27f7145036","name":"link out 1","mode":"link","links":[],"x":878,"y":429.5,"wires":[]},{"id":"d32e71dcb398fd64","type":"debug","z":"43e8af136f4d0fbe","g":"dc1f1434a48fcc1a","name":"debug 1","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":878,"y":288.8928527832031,"wires":[]}]