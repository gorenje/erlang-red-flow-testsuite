[{"id":"7444a788860dd588","type":"tab","label":"[supervisor] two supervisors cannot supervise the same nodes","disabled":false,"info":"<small><i>[Share link](https://flows.red-erik.org/f/7444a788860dd588)</i></small>\n\n## Supervising same nodes\n\nHere the <a class=\"ahl-node-only\" data-ids=\"8cf83b208e89d91f\">supervisor</a> on the left fails because it wants to supervise the same three nodes as the <a class=\"ahl-node-only\" data-ids=\"cb99647226dc6873\">supervisor</a> on the right which does start.\n\nIn fact it is unclear which supervisor will fail because it depends on the initialisation sequence.\n\nHowever one will fail because it is not possible to supervise the same nodes via two different (nor two *same*) supervisors.\n\nErlang supports monitoring two separate processes of the same codebase by providing the same [start parameters](https://www.erlang.org/doc/system/sup_princ.html#child-specification) in the definition of children.\n\nThe equivalent in Erlang-Red would be to copy & paste an existing node and have the copy being suprvised by another supervisor - code duplication done visually.\n\nThis raises an interesting aspect of visual programming: code duplication. Does the ideas of [DRY](https://en.wikipedia.org/wiki/Don't_repeat_yourself) actually apply to visual programming?\n\nAnswer is: No, they don't.\n\nCopying code visually is perfectly ok *provided* one is absolutely sure that code won't be altered again.\n\nQuestion: how does one know the code won't be altered again? Answer: Experience.\n\n","env":[]},{"id":"8cf83b208e89d91f","type":"erlsupervisor","z":"7444a788860dd588","name":"left supervisor","scope":["2453ef161a859858","486a9779dc4ed6a5","749aa6b2a5e2813d"],"supervisor_type":"static","strategy":"one_for_one","auto_shutdown":"never","intensity":"1","period":"5","child_type":"worker","child_restart":"permanent","child_shutdown":"brutal_kill","child_shutdown_timeout":"0","x":410.66665267944336,"y":379.666627407074,"wires":[[]]},{"id":"2453ef161a859858","type":"switch","z":"7444a788860dd588","name":"","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":562,"y":535,"wires":[[]]},{"id":"486a9779dc4ed6a5","type":"function","z":"7444a788860dd588","name":"function 1","func":"%% Code here is wrapped in a fun (Msg) call\n%% fun (Msg) ->\n    Msg\n%% end.\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":566,"y":491,"wires":[[]]},{"id":"749aa6b2a5e2813d","type":"change","z":"7444a788860dd588","name":"","rules":[{"p":"payload","pt":"msg","t":"set","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":565,"y":582,"wires":[[]]},{"id":"cb99647226dc6873","type":"erlsupervisor","z":"7444a788860dd588","name":"right supervisor","scope":["2453ef161a859858","486a9779dc4ed6a5","749aa6b2a5e2813d"],"supervisor_type":"static","strategy":"one_for_one","auto_shutdown":"never","intensity":"1","period":"5","child_type":"worker","child_restart":"permanent","child_shutdown":"brutal_kill","child_shutdown_timeout":"0","x":754.0000228881836,"y":393.6666679382324,"wires":[[]]}]