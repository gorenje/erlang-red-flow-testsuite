[{"id":"789a7d7140b6d7a4","type":"tab","label":"[.breadboard] scanning all flows for nodes","disabled":false,"info":"## Flow scanning\n\nScan all flow files for a particular node configuration.\n\nHere I'm looking for all assert success nodes that don't have a count value configured.\n\nOr debug nodes that shouldn't be included in tests.\n\nAnd also that node and flow IDs are universal unique.","env":[{"name":"ERED_PENDING","type":"bool","value":"false"}]},{"id":"c24d7393f3f19c1d","type":"group","z":"789a7d7140b6d7a4","name":"assert success nodes without a count value","style":{"label":true},"nodes":["9c0a0ba9e5d3afde","0f1e64473122e326","464314c99f05a25e","c8e162f01da6ac87","44b621eadb210e77"],"x":1729.4444580078125,"y":463,"w":1592.5555419921875,"h":158.763916015625},{"id":"4e16cab434a03538","type":"group","z":"789a7d7140b6d7a4","name":"test flow contains debug nodes","style":{"label":true},"nodes":["d5914cc889ef986f","39f35cb48838928e","0b13b4b3f7f1639b","c536ac07c18bc9e8","e93c8d8a186d4c51","a30ba0ff4c45734c"],"x":1774.111328125,"y":266,"w":1335.888671875,"h":161.21429443359375},{"id":"5d2c645572aec40d","type":"group","z":"789a7d7140b6d7a4","name":"ensure node ids are universally unique across all test flows","style":{"fill":"#e3f3d3","label":true},"nodes":["a2c736bf16117b1f","5642c0da1b81501d","6dc12dd49e304d82","d74ee77298140b11","a1cc98043e15865f","132e011b59fef855","bd829ce677ef7968"],"x":1787.888916015625,"y":67.5,"w":1624.111083984375,"h":143.72098541259766},{"id":"f6baad25357e36b0","type":"group","z":"789a7d7140b6d7a4","name":"identify any duplicate node ids and show which flow contains duplicates","style":{"label":true},"nodes":["c65853d3db6b6526","c4209c754c273a49","b0e69044412c8e8d","5f4103e0935465ed","f53d9e5e685e7e6b"],"x":1720,"y":678.5,"w":1273,"h":150.5},{"id":"0677f68c675af002","type":"group","z":"789a7d7140b6d7a4","name":"ensure a limited set of flow environment variables are used","style":{"label":true},"nodes":["4d88d822ba4efbcd","2d45fb644513ced0","e624ea3bd26f1cce","1a7a1da6221a05e1","96a4cbf26ce61f12"],"x":1651,"y":868,"w":1119,"h":127.5},{"id":"5fe3d9322a13a03f","type":"inject","z":"789a7d7140b6d7a4","name":"set directory location","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"$privdir() & \"/testflows\"","payloadType":"jsonata","x":200.71429443359375,"y":716,"wires":[["5f5cbf45df7cc40b"]]},{"id":"5f5cbf45df7cc40b","type":"exec","z":"789a7d7140b6d7a4","command":"ls","addpay":"payload","append":"","useSpawn":"false","timer":"","winHide":false,"oldrc":false,"name":"","x":473,"y":716,"wires":[["49464c64ec47dbd2"],[],[]]},{"id":"2d5a6c91a73e2d5a","type":"split","z":"789a7d7140b6d7a4","name":"","splt":"\\n","spltType":"str","arraySplt":"17","arraySpltType":"len","stream":false,"addname":"","property":"payload","x":777,"y":567.3973236083984,"wires":[["88c2518380e8fd3f"]]},{"id":"88c2518380e8fd3f","type":"change","z":"789a7d7140b6d7a4","name":"","rules":[{"p":"payload","pt":"msg","t":"set","to":"$trim($toString($$.payload))","tot":"jsonata"},{"p":"flowid","pt":"msg","t":"set","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1157.6666666666667,"y":567.3973236083984,"wires":[["704d19a394f1debe"]]},{"id":"704d19a394f1debe","type":"switch","z":"789a7d7140b6d7a4","name":"","property":"$length($$.payload)","propertyType":"jsonata","rules":[{"t":"eq","v":"16","vt":"num"}],"checkall":"true","repair":false,"outputs":1,"x":883,"y":424.4151611328125,"wires":[["8d8bfb8384244635"]]},{"id":"8d8bfb8384244635","type":"change","z":"789a7d7140b6d7a4","name":"","rules":[{"p":"filename","pt":"msg","t":"set","to":"$toString($privdir() & \"/testflows/\" & $$.payload & \"/flows.json\")","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":1068.3333333333335,"y":424.4151611328125,"wires":[["933725060fcbed8d"]]},{"id":"49464c64ec47dbd2","type":"change","z":"789a7d7140b6d7a4","name":"","rules":[{"p":"payload","pt":"msg","t":"set","to":"$trim($toList($$.payload))","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":1237,"y":702,"wires":[["2d5a6c91a73e2d5a"]]},{"id":"933725060fcbed8d","type":"file in","z":"789a7d7140b6d7a4","name":"","filename":"filename","filenameType":"msg","format":"utf8","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":999,"y":265.3125,"wires":[["5718ae424030eda7"]]},{"id":"2d8649b52824e005","type":"json","z":"789a7d7140b6d7a4","name":"","property":"payload","action":"","pretty":false,"x":1588.4444580078125,"y":170.22098541259766,"wires":[["9c0a0ba9e5d3afde","39f35cb48838928e","5642c0da1b81501d","c65853d3db6b6526","4d88d822ba4efbcd"]]},{"id":"9c0a0ba9e5d3afde","type":"function","z":"789a7d7140b6d7a4","g":"c24d7393f3f19c1d","name":"filter on assert success nodes without count value","func":"#{ <<\"payload\">> := Payload } = Msg,\nMsg#{ \n      <<\"payload\">> => lists:filter( \n            fun( #{ <<\"type\">> := <<\"ut-assert-success\">>, <<\"count\">> := _Count } ) -> false; \n                ( #{ <<\"type\">> := <<\"ut-assert-success\">> } ) -> true; \n                (_) -> false end, \n            Payload) }\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1945.4444580078125,"y":580.763916015625,"wires":[["0f1e64473122e326"]]},{"id":"0f1e64473122e326","type":"switch","z":"789a7d7140b6d7a4","g":"c24d7393f3f19c1d","name":"payload contains at least one node?","property":"$count($$.payload)","propertyType":"jsonata","rules":[{"t":"gt","v":"0","vt":"num"}],"checkall":"true","repair":false,"outputs":1,"x":2358.111083984375,"y":580.763916015625,"wires":[["c8e162f01da6ac87"]]},{"id":"5718ae424030eda7","type":"change","z":"789a7d7140b6d7a4","name":"","rules":[{"p":"original_file_contents","pt":"msg","t":"set","to":"payload","tot":"msg"},{"p":"autoimport","pt":"msg","t":"set","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":1309,"y":170.22098541259766,"wires":[["2d8649b52824e005"]]},{"id":"464314c99f05a25e","type":"ClientCode","z":"789a7d7140b6d7a4","d":true,"g":"c24d7393f3f19c1d","name":"TriggerImport","clientcode":"function doIt() {\n  var content = msg.original_file_contents;\n\n  if (content.length == 0) {\n    RED.notify(\"No new content\", {\n      type: \"ok\",\n      id: \"TriggerImport\",\n      timeout: 2000\n    });\n    return;\n  }\n  RED.clipboard.import();\n\n  setTimeout(() => {\n    $('#red-ui-clipboard-dialog-import-text').val(\n      content\n    ).trigger(\"paste\");\n\n    if (msg.autoimport) {\n      setTimeout(() => {\n        $('#red-ui-clipboard-dialog-ok').trigger('click');\n        node.send({ payload: \"ok\"})\n      }, 435);\n    } else {\n      node.send({ payload: \"ok\" })\n    }\n  }, 300);\n};\n\ndoIt();\n","format":"javascript","x":3013.4443359375,"y":580.763916015625,"wires":[[]]},{"id":"c8e162f01da6ac87","type":"function","z":"789a7d7140b6d7a4","g":"c24d7393f3f19c1d","name":"pass through only the first message","func":"#{ '_mc_incoming' := MsgCount } = NodeDef,\n\ncase MsgCount of \n    1 ->\n        Msg;\n    _ ->\n        undefined\nend\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2720.7777099609375,"y":580.763916015625,"wires":[["464314c99f05a25e","44b621eadb210e77"]]},{"id":"d5914cc889ef986f","type":"debug","z":"789a7d7140b6d7a4","g":"4e16cab434a03538","name":"debug 1","active":false,"tosidebar":false,"console":false,"tostatus":true,"complete":"parts.index","targetType":"msg","statusVal":"","statusType":"counter","x":2485.111328125,"y":317.21429443359375,"wires":[]},{"id":"39f35cb48838928e","type":"function","z":"789a7d7140b6d7a4","g":"4e16cab434a03538","name":"filter on debug nodes","func":"#{ <<\"payload\">> := Payload } = Msg,\nMsg#{ \n      <<\"payload\">> => lists:filter( \n            fun( #{ <<\"type\">> := <<\"debug\">>, <<\"active\">> := false }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"182731f54d855071\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"1fd621a674360b5d\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"211405fa9e8a6f9b\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"43e8af136f4d0fbe\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"3d6a5582d9779194\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"3afa3b2ec00a5e3d\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"5a06352874fa379d\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"684b9066e98b9722\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"6f0dcbf18234c5e2\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"6ff45e2a0ce77393\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"700c94899fdd3334\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"789a7d7140b6d7a4\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"6b22ce2a482c2d6d\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"79d0839cd7b4061d\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"7fea9696f6186962\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"84a5a362cafe703f\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"83c5e1824f32abec\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"af57984ed3302e3e\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"a916165378c446e3\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"a6dc7002d0a8640e\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"b2a67e301fabab0e\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"b723353a316fa50e\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"9a1bdfdcd7b2be8e\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"e447b0048a5983b5\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"dc897f402c53697f\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"c0b1cf6656eac77f\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"b1463d7bbf545725\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"db3426b96377ec6e\">> }) -> false;\n               %% ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"\">> }) -> false;\n               %% ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"\">> }) -> false;\n               %% ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"\">> }) -> false;\n               %% ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"\">> }) -> false;\n               %% ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"\">> }) -> false;\n               %% ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"\">> }) -> false;\n               %% ( #{ <<\"type\">> := <<\"debug\">>, <<\"z\">> := <<\"\">> }) -> false;\n               ( #{ <<\"type\">> := <<\"debug\">> } ) -> true; \n               (_) -> false end, \n            Payload) }\n\n\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1900.111328125,"y":386.21429443359375,"wires":[["0b13b4b3f7f1639b"]]},{"id":"0b13b4b3f7f1639b","type":"switch","z":"789a7d7140b6d7a4","g":"4e16cab434a03538","name":"payload contains at least one node?","property":"$count($$.payload)","propertyType":"jsonata","rules":[{"t":"gt","v":"0","vt":"num"}],"checkall":"true","repair":false,"outputs":1,"x":2220.111328125,"y":386.21429443359375,"wires":[["d5914cc889ef986f","e93c8d8a186d4c51"]]},{"id":"c536ac07c18bc9e8","type":"ClientCode","z":"789a7d7140b6d7a4","d":true,"g":"4e16cab434a03538","name":"TriggerImport","clientcode":"function doIt() {\n  var content = msg.original_file_contents;\n\n  if (content.length == 0) {\n    RED.notify(\"No new content\", {\n      type: \"ok\",\n      id: \"TriggerImport\",\n      timeout: 2000\n    });\n    return;\n  }\n  RED.clipboard.import();\n\n  setTimeout(() => {\n    $('#red-ui-clipboard-dialog-import-text').val(\n      content\n    ).trigger(\"paste\");\n\n    if (msg.autoimport) {\n      setTimeout(() => {\n        $('#red-ui-clipboard-dialog-ok').trigger('click');\n        node.send({ payload: \"ok\"})\n      }, 435);\n    } else {\n      node.send({ payload: \"ok\" })\n    }\n  }, 300);\n};\n\ndoIt();\n","format":"javascript","x":2870.111328125,"y":386.21429443359375,"wires":[[]]},{"id":"e93c8d8a186d4c51","type":"function","z":"789a7d7140b6d7a4","g":"4e16cab434a03538","name":"pass through only the first message","func":"#{ '_mc_incoming' := MsgCount } = NodeDef,\n\ncase MsgCount of \n    1 ->\n        Msg;\n    _ ->\n        undefined\nend\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2580.111328125,"y":386.21429443359375,"wires":[["c536ac07c18bc9e8","a30ba0ff4c45734c"]]},{"id":"a2c736bf16117b1f","type":"join","z":"789a7d7140b6d7a4","g":"5d2c645572aec40d","name":"","mode":"auto","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","useparts":false,"accumulate":"false","timeout":"","count":"","reduceRight":false,"x":2154.888916015625,"y":170.22098541259766,"wires":[["6dc12dd49e304d82"]]},{"id":"5642c0da1b81501d","type":"change","z":"789a7d7140b6d7a4","g":"5d2c645572aec40d","name":"","rules":[{"p":"payload","pt":"msg","t":"set","to":"$map($$.payload, function($v) { $v.id } )","tot":"jsonata"},{"p":"original_file_contents","pt":"msg","t":"delete"}],"action":"","property":"","from":"","to":"","reg":false,"x":1893.888916015625,"y":170.22098541259766,"wires":[["a2c736bf16117b1f"]]},{"id":"6dc12dd49e304d82","type":"change","z":"789a7d7140b6d7a4","g":"5d2c645572aec40d","name":"","rules":[{"p":"non_distinct_length","pt":"msg","t":"set","to":"$count($sort($flatten($$.payload)))","tot":"jsonata"},{"p":"distinct_length","pt":"msg","t":"set","to":"$count($distinct($flatten($$.payload)))","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":2440.888916015625,"y":170.22098541259766,"wires":[["d74ee77298140b11","a1cc98043e15865f"]]},{"id":"d74ee77298140b11","type":"ut-assert-values","z":"789a7d7140b6d7a4","g":"5d2c645572aec40d","name":"length of distinct ids equal to length of ids","ignore_failure_if_succeed":false,"rules":[{"p":"non_distinct_length","pt":"msg","t":"eql","to":"distinct_length","tot":"msg"}],"x":2826.888916015625,"y":170.22098541259766,"wires":[[]]},{"id":"c65853d3db6b6526","type":"function","z":"789a7d7140b6d7a4","g":"f6baad25357e36b0","name":"payload becomes tuple with flow id and node ids","func":"#{ <<\"payload\">> := Payload, \n   <<\"flowid\">> := FlowId } = Msg, \n\nMsg#{ <<\"payload\">> => {FlowId, lists:map( fun(#{<<\"id\">> := Id}) -> Id end, Payload)} }\n\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1936,"y":788,"wires":[["c4209c754c273a49"]]},{"id":"c4209c754c273a49","type":"join","z":"789a7d7140b6d7a4","g":"f6baad25357e36b0","name":"","mode":"auto","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","useparts":false,"accumulate":true,"timeout":"","count":"","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":2247.75,"y":788,"wires":[["b0e69044412c8e8d"]]},{"id":"b0e69044412c8e8d","type":"function","z":"789a7d7140b6d7a4","g":"f6baad25357e36b0","name":"identify duplicate node ids","func":"#{ <<\"payload\">> := Payload } = Msg, \nMsg#{ <<\"payload\">> => helpers_scanids:find_duplicates(Payload,#{}) }\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2489.5,"y":788,"wires":[["f53d9e5e685e7e6b"]]},{"id":"5f4103e0935465ed","type":"erlmodule","z":"789a7d7140b6d7a4","g":"f6baad25357e36b0","name":"","module_name":"helpers_scanids","code":"-module(helpers_scanids).\n\n-export([\n   find_duplicates/2\n]).\n\nfind_duplicates([], Stack) -> \n   duplicates(maps:to_list(Stack),[]);\n\nfind_duplicates([{_FlowId, []} | Rest], Stack) ->\n   find_duplicates(Rest, Stack);\n\nfind_duplicates([{FlowId, [NodeId | NodeIds]} | Rest], Stack) ->\n    Stack2 =\n        case maps:find(NodeId, Stack) of\n            {ok, Val} ->\n                Stack#{NodeId => [FlowId | Val]};\n            _ ->\n                Stack#{NodeId => [FlowId]}\n        end,\n    find_duplicates([{FlowId, NodeIds}|Rest], Stack2).\n\n\nis_duplicate({_, [_SingleFileName | []]}) ->\n    false;\nis_duplicate({_, _}) ->\n    true.\n\nduplicates([], Acc) ->\n    Acc;\nduplicates([H | T], Acc) ->\n    case is_duplicate(H) of\n        true -> duplicates(T, [H | Acc]);\n        _ -> duplicates(T, Acc)\n    end.\n\n","x":1956,"y":721.5,"wires":[]},{"id":"f53d9e5e685e7e6b","type":"ut-assert-values","z":"789a7d7140b6d7a4","g":"f6baad25357e36b0","name":"list of duplications should be empty","ignore_failure_if_succeed":false,"rules":[{"p":"payload","pt":"msg","t":"eql","to":"[]","tot":"json"}],"x":2827,"y":719.5,"wires":[[]]},{"id":"a1cc98043e15865f","type":"change","z":"789a7d7140b6d7a4","g":"5d2c645572aec40d","name":"count payload => num of test flows","rules":[{"p":"payload","pt":"msg","t":"set","to":"$count($$.payload)","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":2711,"y":108.5,"wires":[["132e011b59fef855"]]},{"id":"132e011b59fef855","type":"switch","z":"789a7d7140b6d7a4","g":"5d2c645572aec40d","name":"atleast 243 flows","property":"payload","propertyType":"msg","rules":[{"t":"gt","v":"243","vt":"num"}],"checkall":"true","repair":false,"outputs":1,"x":3048.5,"y":108.5,"wires":[["bd829ce677ef7968"]]},{"id":"bd829ce677ef7968","type":"ut-assert-success","z":"789a7d7140b6d7a4","g":"5d2c645572aec40d","name":"","count":1,"x":3316,"y":108.5,"wires":[]},{"id":"a30ba0ff4c45734c","type":"ut-assert-failure","z":"789a7d7140b6d7a4","g":"4e16cab434a03538","name":"test flows should not have debug nodes","x":2924,"y":307,"wires":[]},{"id":"44b621eadb210e77","type":"ut-assert-failure","z":"789a7d7140b6d7a4","g":"c24d7393f3f19c1d","name":"assert success with without count attribute","x":3126,"y":504,"wires":[]},{"id":"4d88d822ba4efbcd","type":"function","z":"789a7d7140b6d7a4","g":"0677f68c675af002","name":"filter on tabs return the ENV values","func":"#{ <<\"payload\">> := Payload } = Msg,\nPayload2 =lists:filter( \n                fun( [_A|_T] ) -> true; \n                    (_) -> false end, \n            lists:map( fun( #{ <<\"env\">> := Env }) -> Env;\n                      (_) -> undefined end,\n                lists:filter( \n                    fun( #{ <<\"type\">> := <<\"tab\">> } ) -> true; \n                        (_) -> false end, \n                    Payload) \n        )\n    ),\n\ncase length(Payload2) of \n    0 ->\n        Msg#{ <<\"payload\">> => [] };\n    _ ->\n        Msg#{ <<\"payload\">> => lists:map(fun ( #{ <<\"name\">> := Name} )-> Name end, lists:nth(1,Payload2)) }\nend\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1817,"y":954.5,"wires":[["2d45fb644513ced0"]]},{"id":"2d45fb644513ced0","type":"join","z":"789a7d7140b6d7a4","g":"0677f68c675af002","name":"","mode":"auto","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","useparts":false,"accumulate":true,"timeout":"","count":"","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":2059.333333333333,"y":954.5,"wires":[["e624ea3bd26f1cce"]]},{"id":"e624ea3bd26f1cce","type":"change","z":"789a7d7140b6d7a4","g":"0677f68c675af002","name":"","rules":[{"p":"payload","pt":"msg","t":"set","to":"$distinct($flatten($$.payload))","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":2241.6666666666665,"y":954.5,"wires":[["1a7a1da6221a05e1"]]},{"id":"1a7a1da6221a05e1","type":"function","z":"789a7d7140b6d7a4","g":"0677f68c675af002","name":"sort payload","func":"#{ <<\"payload\">> := Payload } = Msg,\nMsg#{ <<\"payload\">> => lists:sort(fun ( A,B ) -> A > B end, Payload) }\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2444,"y":954.5,"wires":[["96a4cbf26ce61f12"]]},{"id":"96a4cbf26ce61f12","type":"ut-assert-values","z":"789a7d7140b6d7a4","g":"0677f68c675af002","name":"","ignore_failure_if_succeed":false,"rules":[{"p":"payload","pt":"msg","t":"eql","to":"[\"NODE_RED_DIVERGENT\",\"ERED_TIMEOUT\",\"ERED_PENDING\",\"ERED_ONLY\",\"ERED_NOT_EUNIT\",\"ERED_KEEPRUNNING\"]","tot":"json"}],"x":2654,"y":909,"wires":[[]]}]