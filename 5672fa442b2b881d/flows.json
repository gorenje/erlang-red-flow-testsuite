[{"id":"5672fa442b2b881d","type":"tab","label":"[statemachine] initial example","disabled":false,"info":"The [push pen button example](https://www.erlang.org/doc/apps/stdlib/gen_statem.html#module-pushbutton-code) from the documentation of the state machine.\n\n","env":[{"name":"ERED_PENDING","value":"true","type":"bool"}]},{"id":"f2ebb3bf285716ac","type":"erlstatemachine","z":"5672fa442b2b881d","name":"","module_name":"pushbutton","nodeid":"d27ff6b4cb3f4b16","x":468,"y":983,"wires":[["8ef066b7e0991297"]]},{"id":"d27ff6b4cb3f4b16","type":"erlmodule","z":"5672fa442b2b881d","name":"Module: pushbutton","module_name":"pushbutton","code":"-module(pushbutton).\n-behaviour(gen_statem).\n\n-export([start/0,push/0,get_count/0,stop/0]).\n-export([terminate/3,code_change/4,init/1,callback_mode/0]).\n-export([on/3,off/3]).\n\nname() -> pushbutton_statem. % The registered server name\n\n%% API.  This example uses a registered name name()\n%% and does not link to the caller.\nstart() ->\n    gen_statem:start({local,name()}, ?MODULE, [], []).\npush() ->\n    gen_statem:call(name(), push).\nget_count() ->\n    gen_statem:call(name(), get_count).\nstop() ->\n    gen_statem:stop(name()).\n\n%% Mandatory callback functions\nterminate(_Reason, _State, _Data) ->\n    void.\ncode_change(_Vsn, State, Data, _Extra) ->\n    {ok,State,Data}.\ninit([]) ->\n    %% Set the initial state + data.  Data is used only as a counter.\n    State = off, Data = 0,\n    {ok,State,Data}.\ncallback_mode() -> state_functions.\n\n%%% state callback(s)\n\noff({call,From}, push, Data) ->\n    %% Go to 'on', increment count and reply\n    %% that the resulting status is 'on'\n    {next_state,on,Data+1,[{reply,From,on}]};\noff(EventType, EventContent, Data) ->\n    handle_event(EventType, EventContent, Data).\n\non({call,From}, push, Data) ->\n    %% Go to 'off' and reply that the resulting status is 'off'\n    {next_state,off,Data,[{reply,From,off}]};\non(EventType, EventContent, Data) ->\n    handle_event(EventType, EventContent, Data).\n\n%% Handle events common to all states\nhandle_event({call,From}, get_count, Data) ->\n    %% Reply with the current count\n    {keep_state,Data,[{reply,From,Data}]};\nhandle_event(_, _, Data) ->\n    %% Ignore all other events\n    {keep_state,Data}.\n","x":500,"y":853,"wires":[]},{"id":"6d2bab8388444151","type":"inject","z":"5672fa442b2b881d","name":"push","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"push","payloadType":"str","x":247,"y":1092,"wires":[["f2ebb3bf285716ac"]]},{"id":"8ef066b7e0991297","type":"debug","z":"5672fa442b2b881d","name":"debug 1","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":790,"y":983,"wires":[]},{"id":"be3f533788078139","type":"inject","z":"5672fa442b2b881d","name":"get_count","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"get_count","payloadType":"str","x":243,"y":896,"wires":[["f2ebb3bf285716ac"]]}]