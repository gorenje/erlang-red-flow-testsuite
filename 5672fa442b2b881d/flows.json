[{"id":"5672fa442b2b881d","type":"tab","label":"[statemachine] Representing gen_statem in Erlang-Red","disabled":false,"info":"## gen_statem behaviour\n\nErlang-Red won't be Erlang if it didn't know how to behave itself. This example shows how the [gen_statem](https://www.erlang.org/doc/apps/stdlib/gen_statem.html) behaviour can be visually implemented in Erlang-Red.\n\n## Setup\n\nSetting up a state machine requires defining a module for defining the behaviour of the state machine. For this test, the <a class=\"ahl-node-only\" data-ids=\"d27ff6b4cb3f4b16\">Module: pushbutton</a> is being used. It represents the [push pen button example](https://www.erlang.org/doc/apps/stdlib/gen_statem.html#module-pushbutton-code) from the documentation of the state machine.\n\nThe <a class=\"ahl-node-only\" data-ids=\"f2ebb3bf285716ac,d4fdb9f5a3792660\">state machine</a> nodes make reference to the module in their respective configurations. That defines the statemachines behaviour.\n\nWhen the statemachine receives a message from the one of the <a class=\"ahl-node-only\" data-ids=\"6d2bab8388444151,be3f533788078139,6ace31b4957dff44,d8856ed846ba27d0\">inject</a> nodes, it calls executes the follwing:\n\n```erlang\n#{payload := Action} = Msg,\nResult = gen_statem:call(Pid, binary_to_atom(Action)),\n```\n\nThe `payload` defines the action to perform and the result of the action is passed out as the payload on the outgoing message - if an outgoing message is generated.\n\n## Option: Send on state change\n\nThe difference between the two examples is that the <a class=\"ahl-group-only\" data-ids=\"5e10f2923ccf0b2a\">top one</a> only emits an outgoing message if the state has changed. This does not happen when `get_count` is triggered - it does not result in a state change so there is no outgoing message generated.\n\nThe <a class=\"ahl-group-only\" data-ids=\"3e05a4f2d46028bb\">bottom example</a> always emits outgoing messages, generating a message on every action.\n\nUsing this options allows the statemachine to act as a gateway. \n\n## Current state\n\nThe current state of the statemachine is always shown on the status of the node. \n\n## Other behaviours\n\n- [Supervisor](https://flows.red-erik.org/f/83c5e1824f32abec)\n","env":[{"name":"ERED_PENDING","value":"false","type":"bool"}]},{"id":"5e10f2923ccf0b2a","type":"group","z":"5672fa442b2b881d","name":"only emit message on state change","style":{"label":true},"nodes":["f2ebb3bf285716ac","6d2bab8388444151","be3f533788078139","cb1f14a8e90433e9","aca422d93c92ee09","02bdd92d876da519"],"x":173,"y":242,"w":1042,"h":215},{"id":"f96f6bc60d58a481","type":"group","z":"5672fa442b2b881d","name":"common code used by all examples here","style":{"label":true},"nodes":["d27ff6b4cb3f4b16"],"x":173,"y":73,"w":265,"h":82},{"id":"3e05a4f2d46028bb","type":"group","z":"5672fa442b2b881d","name":"always emit messages","style":{"label":true},"nodes":["d4fdb9f5a3792660","6ace31b4957dff44","d8856ed846ba27d0","6f16fef44161a72e","f753306adf339932","3222b838d7e91c5f"],"x":178.5,"y":519,"w":1042,"h":215},{"id":"f2ebb3bf285716ac","type":"erlstatemachine","z":"5672fa442b2b881d","g":"5e10f2923ccf0b2a","name":"State machine - don't send on same state","module_name":"pushbutton","nodeid":"d27ff6b4cb3f4b16","emit_on_state_change":true,"x":578,"y":348,"wires":[["cb1f14a8e90433e9"]]},{"id":"d27ff6b4cb3f4b16","type":"erlmodule","z":"5672fa442b2b881d","g":"f96f6bc60d58a481","name":"Module: pushbutton","module_name":"pushbutton","code":"%%\n%% Code taken from\n%%  https://www.erlang.org/doc/apps/stdlib/gen_statem.html#module-pushbutton-code\n%%\n-module(pushbutton).\n-behaviour(gen_statem).\n\n-export([start/0,push/0,get_count/0,stop/0]).\n-export([terminate/3,code_change/4,init/1,callback_mode/0]).\n-export([on/3,off/3]).\n\nname() -> pushbutton_statem. % The registered server name\n\n%% API.  This example uses a registered name name()\n%% and does not link to the caller.\nstart() ->\n    gen_statem:start({local,name()}, ?MODULE, [], []).\npush() ->\n    gen_statem:call(name(), push).\nget_count() ->\n    gen_statem:call(name(), get_count).\nstop() ->\n    gen_statem:stop(name()).\n\n%% Mandatory callback functions\nterminate(_Reason, _State, _Data) ->\n    void.\ncode_change(_Vsn, State, Data, _Extra) ->\n    {ok,State,Data}.\ninit([]) ->\n    %% Set the initial state + data.  Data is used only as a counter.\n    State = off, Data = 0,\n    {ok,State,Data}.\ncallback_mode() -> state_functions.\n\n%%% state callback(s)\n\noff({call,From}, push, Data) ->\n    %% Go to 'on', increment count and reply\n    %% that the resulting status is 'on'\n    {next_state,on,Data+1,[{reply,From,on}]};\noff(EventType, EventContent, Data) ->\n    handle_event(EventType, EventContent, Data).\n\non({call,From}, push, Data) ->\n    %% Go to 'off' and reply that the resulting status is 'off'\n    {next_state,off,Data,[{reply,From,off}]};\non(EventType, EventContent, Data) ->\n    handle_event(EventType, EventContent, Data).\n\n%% Handle events common to all states\nhandle_event({call,From}, get_count, Data) ->\n    %% Reply with the current count\n    {keep_state,Data,[{reply,From,Data}]};\nhandle_event(_, _, Data) ->\n    %% Ignore all other events\n    {keep_state,Data}.\n","x":289,"y":114,"wires":[[]]},{"id":"6d2bab8388444151","type":"inject","z":"5672fa442b2b881d","g":"5e10f2923ccf0b2a","name":"push","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"push","payloadType":"str","x":290,"y":416,"wires":[["f2ebb3bf285716ac"]]},{"id":"be3f533788078139","type":"inject","z":"5672fa442b2b881d","g":"5e10f2923ccf0b2a","name":"get_count","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"get_count","payloadType":"str","x":279,"y":283,"wires":[["f2ebb3bf285716ac"]]},{"id":"cb1f14a8e90433e9","type":"switch","z":"5672fa442b2b881d","g":"5e10f2923ccf0b2a","name":"","property":"action","propertyType":"msg","rules":[{"t":"eq","v":"push","vt":"str"},{"t":"eq","v":"get_count","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":895,"y":348,"wires":[["aca422d93c92ee09"],["02bdd92d876da519"]]},{"id":"aca422d93c92ee09","type":"ut-assert-success","z":"5672fa442b2b881d","g":"5e10f2923ccf0b2a","name":"","x":1118,"y":318.5,"wires":[]},{"id":"02bdd92d876da519","type":"ut-assert-failure","z":"5672fa442b2b881d","g":"5e10f2923ccf0b2a","name":"","x":1119,"y":399.5,"wires":[]},{"id":"d4fdb9f5a3792660","type":"erlstatemachine","z":"5672fa442b2b881d","g":"3e05a4f2d46028bb","name":"State machine - always send message","module_name":"pushbutton","nodeid":"d27ff6b4cb3f4b16","emit_on_state_change":false,"x":573.5,"y":625,"wires":[["6f16fef44161a72e"]]},{"id":"6ace31b4957dff44","type":"inject","z":"5672fa442b2b881d","g":"3e05a4f2d46028bb","name":"push","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"push","payloadType":"str","x":295.5,"y":693,"wires":[["d4fdb9f5a3792660"]]},{"id":"d8856ed846ba27d0","type":"inject","z":"5672fa442b2b881d","g":"3e05a4f2d46028bb","name":"get_count","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"get_count","payloadType":"str","x":284.5,"y":560,"wires":[["d4fdb9f5a3792660"]]},{"id":"6f16fef44161a72e","type":"switch","z":"5672fa442b2b881d","g":"3e05a4f2d46028bb","name":"","property":"action","propertyType":"msg","rules":[{"t":"eq","v":"push","vt":"str"},{"t":"eq","v":"get_count","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":900.5,"y":625,"wires":[["f753306adf339932"],["3222b838d7e91c5f"]]},{"id":"f753306adf339932","type":"ut-assert-success","z":"5672fa442b2b881d","g":"3e05a4f2d46028bb","name":"","x":1123.5,"y":595.5,"wires":[]},{"id":"3222b838d7e91c5f","type":"ut-assert-success","z":"5672fa442b2b881d","g":"3e05a4f2d46028bb","name":"","x":1124.5,"y":662,"wires":[]}]