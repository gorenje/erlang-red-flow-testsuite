[{"id":"6dd3a5754f83dc2e","type":"tab","label":"[function] set node context ","disabled":false,"info":"## Function Node Context\n\nBe able to set context between calls to the function node using the NodeDef parameter.\n\nThis does not work since the underlying implementation is async - meaning the function is triggered by a message and the results is sent as another message to the function node.\n\nIn the meantime, another message is received that uses an older context becase the updated context as not yet been sent back to the function node - from a previous message.\n\nHence this is a pending test that should be done down the road.\n\nMy preference would be to have a \"synchronised execution\" option on the function node so that it can be deactivated to speed up the function node.\n\nIf the function node only acts on the message, then there needs to be no serialisation of the execution.","env":[{"name":"ERED_PENDING","value":"true","type":"bool"}]},{"id":"bc538fc8417872a7","type":"inject","z":"6dd3a5754f83dc2e","name":"","props":[{"p":"counter","v":"0","vt":"num"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":257,"y":600.8392333984375,"wires":[["f243244784e79961"]]},{"id":"f243244784e79961","type":"change","z":"6dd3a5754f83dc2e","name":"update counter","rules":[{"t":"set","p":"payload","pt":"msg","to":"counter","tot":"msg"},{"t":"set","p":"counter","pt":"msg","to":"$$.counter + 1","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":501.5714111328125,"y":742.8392333984375,"wires":[["2c8c10171634cee5","e1e7f366de17a26c"]]},{"id":"2c8c10171634cee5","type":"switch","z":"6dd3a5754f83dc2e","name":"limit to 10_000 messages","property":"payload","propertyType":"msg","rules":[{"t":"lt","v":"10000","vt":"num"}],"checkall":"true","repair":false,"outputs":1,"x":512.5714111328125,"y":511.9999542236328,"wires":[["f243244784e79961"]]},{"id":"e1e7f366de17a26c","type":"function","z":"6dd3a5754f83dc2e","name":"update context of Node","func":"#{ '_counter' := C } = NodeDef,\n{ \n  NodeDef#{ '_counter' => C + 1}, \n  Msg#{ <<\"payload\">> => C } \n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"%% Code added here will be run once\n%% whenever the node is started.\nNodeDef#{ '_counter' => 0 }","finalize":"","libs":[],"x":844,"y":600,"wires":[[]]}]