[{"id":"3bba732ae17b01a9","type":"tab","label":"[function] speaks Erlang","disabled":false,"info":"I guess would be an ErlangRED only test. But it's the function node now styled in Erlang code.\n","env":[]},{"id":"8635e881fe0a171d","type":"inject","z":"3bba732ae17b01a9","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":286,"y":256,"wires":[["f9fb40d63b894db4"]]},{"id":"f9fb40d63b894db4","type":"function","z":"3bba732ae17b01a9","name":"function 2","func":"%% Code is called in a function wrapper:\n%%     fun (NodeDef, Msg) -> .... end.\n%% and must return a Msg map.\n\nMsg2 = maps:put(payload, \"hello world\", Msg),\nmaps:put(start_value, maps:get('_start_was_called', NodeDef), Msg2)\n\n","outputs":1,"timeout":0,"noerr":0,"initialize":"%% Code added here will be run once\n%% whenever the node is started.\n%% This gets wrapped in a function definition:\n%%   fun (NodeDef,Msg) -> ... end\n%% and must return a NodeDef map.\n\n%% ered_nodered_comm:send_out_debug_msg(NodeDef, Msg, <<\"function started\">>, normal),\n\nmaps:put('_start_was_called', 10, NodeDef)\n","finalize":"%% Code added here will be run once\n%% whenever the node is started.\n%% This gets wrapped in a function definition:\n%%   fun (NodeDef,Msg) -> ... end\n%% and must return a NodeDef map.\n\nered_nodered_comm:send_out_debug_msg(NodeDef, Msg, <<\"function stopped\">>, warning),\n\nNodeDef\n","libs":[],"x":535,"y":490,"wires":[["91c695565075cf5b"]]},{"id":"91c695565075cf5b","type":"ut-assert-values","z":"3bba732ae17b01a9","name":"","rules":[{"t":"eql","p":"payload","pt":"msg","to":"hello world","tot":"str"},{"t":"eql","p":"start_value","pt":"msg","to":"10","tot":"num"}],"x":804,"y":346.5,"wires":[[]]}]