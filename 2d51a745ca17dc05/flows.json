[{"id":"2d51a745ca17dc05","type":"tab","label":"[.docu] Erlang-Red startup","disabled":false,"info":"<script>\n$(function(){\n    $('#flowdatacontainer').hide();\n    $('#flowtitle').html($('#flowtitle').text().replace(\"[.docu]\",\"\"));\n})\n</script>\n\n<small><i>[Share](https://flows.red-erik.org/f/2d51a745ca17dc05)</i></small>\n\n\n## Diagramification of the Erlang-Red flow startup\n\nVisual descrption of [ered_startup](https://github.com/gorenje/erlang-red/blob/82075b02258dfb31a566213c168c890c4564dafd/src/ered_startup.erl) module, the centralised flow creation time module for spinning up all processes defining a flow.\n\n*Background*: Each node of a flow is represented by Erlang processes (or multiple processes) and each node process is independent of all other node processes. Processes only know where to send their output messages to.\n\nRemember Erlang-Red is mimicing how Node-RED works, which is [advantageous](https://blog.openmindmap.org/erlang-red#erlang-red%3A-visual-flow-based-programming-for-erlang) (implicit learnings are onboarded) and unfavorable for features that are unsuited to Erlang. Flow startup process contains much logic that only makes sense if one understands the working of Node-RED flows.\n\nThis description does not describe the [services](https://github.com/gorenje/erlang-red/blob/82075b02258dfb31a566213c168c890c4564dafd/src/erlang_red_sup.erl) started by Erlang-Red as an Erlang process. This descrption focuses solely on the initialisation of Erlang-Red flows when they are deployed or initially created.\n\n## Visual Terminology\n\nEach text block is a function with order shown in **(1)** numbering. Thicker arrows are return values while thin arrows are function calls.\n\n## Diagram 1 of 2\n\nThe `{ Outside World }` passes a collection of nodes to the `create_pids_for_nodes/2` function. These nodes contain all the nodes that define a Node-RED flow, that includes:\n\n- `tab` node that represents a collection of nodes grouped by a tab insides the Node-RED flow editor. The id of the tab node defines the `z` value for each node that belongs to that tab. A tab node can also define environment parameters for the entire flow.\n- `config` nodes that define connection details (for example) to third party services. Configuration details are stored in config nodes and shared amongst instance of service nodes. \n- `service` nodes that represent that connections to third-party services such as MQTT or HTTP connections.\n- `group` nodes that represent groupings of within a tab within the Node-RED flow editor. The id of the group node defines the `g` attribute of nodes that belong to the group.\n- and all other nodes that represent the logic of the flow. The behaviour and interaction of each of these nodes are defined by their own [module](https://github.com/gorenje/erlang-red/tree/82075b02258dfb31a566213c168c890c4564dafd/src/nodes). The [startup module](https://github.com/gorenje/erlang-red/blob/82075b02258dfb31a566213c168c890c4564dafd/src/ered_startup.erl#L292-L331) defines the mapping between node type and module for handling that type. This mapping needs to be updated for each new node type that is supported.\n\nDuring the initial creation time of the processes, the start up process loops through the collection of nodes several times. For example, to store the config nodes, all nodes are iterated through. To insall modules, all nodes are iterated through. This is because there is no order defined in flow JSON files as passed to the server. A Node-RED flow json file consists of an flat array of objects (maps). This means that configuration nodes can be located anywhere in this array.\n\nAs there is an implicit dependency between service nodes that use a configuration node or a function node that makes use of a module node, it is import to retrieve and store config nodes first and install module nodes first before spinning up service and function nodes.\n\n```mermaid\n%% Generated by the Flow2UML Node @ https://flowhub.org/flow2uml\n%% change direction to LR for Node-RED left-to-right UML\ngraph LR\n647f1caf18f4e461@{ shape: \"braces\", label: \"Outside World\" } -- \"create_pids_for_nodes#47;2\" --> cd65242359acde9d@{ shape: \"doc\", label: \"ered_startup.erl\" }\ncd65242359acde9d@{ shape: \"doc\", label: \"ered_startup.erl\" } -- \"**#40;1#41;** call_to\" --> f7b57f5fa2684033@{ shape: \"text\", label: \"store_config_nodes#47;2\" }\ncd65242359acde9d@{ shape: \"doc\", label: \"ered_startup.erl\" } -- \"**#40;2#41;** call_to\" --> 06d71e4d226a0b66@{ shape: \"text\", label: \"install_module_node_code#47;2\" }\ncd65242359acde9d@{ shape: \"doc\", label: \"ered_startup.erl\" } -- \"**#40;3#41;** call_to\" --> 6f2a3728abcf40e8@{ shape: \"text\", label: \"extract_supervisors#47;1\" }\ncd65242359acde9d@{ shape: \"doc\", label: \"ered_startup.erl\" } -- \"**#40;4#41;** call_to\" --> 4b74abd49857f467@{ shape: \"text\", label: \"supervisor_filter_nodes#47;5\" }\ncd65242359acde9d@{ shape: \"doc\", label: \"ered_startup.erl\" } -- \"**#40;5#41;** call_to\" --> 993f43fc0fd83c72@{ shape: \"text\", label: \"create_pids_for_nodes#47;3\" }\nf7b57f5fa2684033@{ shape: \"text\", label: \"store_config_nodes#47;2\" } -- \"store_config_node\" --> deebe7665f77dc9a@{ shape: \"lin-cyl\", label: \"ered_config_store \\n &lt;gen_server&gt;\" }\n06d71e4d226a0b66@{ shape: \"text\", label: \"install_module_node_code#47;2\" } -- \"install#47;2\" --> b8a1bc7329daec62@{ shape: \"notch-rect\", label: \"ered_node_erlmodule\" }\n6f2a3728abcf40e8@{ shape: \"text\", label: \"extract_supervisors#47;1\" } == \"Supervisors\" ==> cd65242359acde9d@{ shape: \"doc\", label: \"ered_startup.erl\" }\n4b74abd49857f467@{ shape: \"text\", label: \"supervisor_filter_nodes#47;5\" } -- \"extract_nodes#47;2\" --> 94123abe4da26501@{ shape: \"notch-rect\", label: \"Supervisor Module\" }\n993f43fc0fd83c72@{ shape: \"text\", label: \"create_pids_for_nodes#47;3\" } == \"Pids\" ==> 647f1caf18f4e461@{ shape: \"braces\", label: \"Outside World\" }\nsubgraph \"ered_startup:create_pids_for_nodes#47;2\"\ncd65242359acde9d\nf7b57f5fa2684033\n06d71e4d226a0b66\n6f2a3728abcf40e8\n4b74abd49857f467\n993f43fc0fd83c72\nend\n```\n\nAs described above, the first thing to do is extract configuration details from the flow:\n\n- **(1)** call to `store_config_nodes/2` takes the node collection that define a flow selects all config nodes. What is a config node? Node-RED provides no help there and again it is a [look-up table](https://github.com/gorenje/erlang-red/blob/82075b02258dfb31a566213c168c890c4564dafd/src/ered_startup.erl#L355-L360) that provides the answer. A hard-coded look up table is not a long term solution, it's a stop-gap solution.\n\nNode-RED allows node packages to define global objects that can be accessed by service nodes. It provides APIs for doing that. Erlang-Red provides a [config store](https://github.com/gorenje/erlang-red/blob/82075b02258dfb31a566213c168c890c4564dafd/src/servers/ered_config_store.erl) service as the centralised global store and the corresponding APIs will follow.\n\nStorage of configuration nodes is done before the service nodes are started. Services nodes are started in step **(4)** below, which is the fourth substep of the fifth step shown here! Access to the config store is exampled by the [mqtt node](https://github.com/gorenje/erlang-red/blob/82075b02258dfb31a566213c168c890c4564dafd/src/nodes/ered_node_mqtt_in.erl#L239). Each service node has an global unique ID reference to the config node that it utilises.\n\n- **(2)** call to `install_module_node_code/2` allows for code inject into Erlang-Red. [Module nodes](https://github.com/gorenje/erlang-red/blob/82075b02258dfb31a566213c168c890c4564dafd/src/nodes/ered_node_erlmodule.erl) define modules for use with the event handler and state machine behaviour nodes. No checks are done for the correctness nor niceness of Erlang code injected via the Erlang module node.\n\nAgain modules defined by the module node can be used by other nodes and therefore must be installed before those nodes are started. Security concerns are clear and modules should be *used with caution*.\n\nTo install node code, the `ered_node_erlmodule:install/2` function is called with the node definition containing the Erlang module code. The node definition is a map of the JSON node object definition.\n\n- **(3)** call to `extract_supervisors/1` retrieve all the supervisors from the collection of nodes. Supervisor nodes completely manage the lifecycle of the nodes that they supervisor. This step divides the collection of flow nodes into two separate collections: supervisors and non-supervisors.\n\n- **(4)** call to `supervisor_filter_nodes/5` has the responsibility of further splitting the nodes into those that are supervised and those that are not supervised. Supervised nodes are removed from the node list and attached to their supervisor node.\n\nThis step is a little bit more complicated because to support a supervisor-of-a-supervisor-of-a-supervisor-of-a... pattern it is necessary that nodes passed to their supervisor if they have all the nodes they are supervising. And as mentioned above, the collection of nodes has no order so this step iterates multiple times through the list of nodes until all nodes have been attached to a supervisor and that supervisor is potentially attached to its supervisor and that finally that supervisor is also attached to its supervisor. It's supervisors all the way up.\n\nEach supervisor is told to sort out its own list of nodes by calling the `SupervisourModule:extract_nodes/3` function that returns a reduced list of nodes if it found all the nodes that it is supervising, else the iteration is repeated with the next supervisor.\n\n\n\n## Diagram 2 of 2\n\n```mermaid\n%% Generated by the Flow2UML Node @ https://flowhub.org/flow2uml\n%% change direction to LR for Node-RED left-to-right UML\ngraph LR\nfd298b0409083e41@{ shape: \"text\", label: \"create_pids_for_nodes#47;3\" } -- \"call_to\" --> 7d549ef8f1abdf52@{ shape: \"text\", label: \"spin_up_node\" }\n7d549ef8f1abdf52@{ shape: \"text\", label: \"spin_up_node\" } == \"Pid\" ==> fd298b0409083e41@{ shape: \"text\", label: \"create_pids_for_nodes#47;3\" }\n7d549ef8f1abdf52@{ shape: \"text\", label: \"spin_up_node\" } -- \"**#40;1#41;** call_to\" --> 020edf6a03f5f1e1@{ shape: \"text\", label: \"node_type_to_module#47;2\" }\n7d549ef8f1abdf52@{ shape: \"text\", label: \"spin_up_node\" } -- \"**#40;2#41;** call_to\" --> 771995a172e88ca0@{ shape: \"text\", label: \"get_node_name#47;2\" }\n7d549ef8f1abdf52@{ shape: \"text\", label: \"spin_up_node\" } -- \"**#40;3#41;** call_to\" --> 5c278940932c7d45@{ shape: \"text\", label: \"clear_pg_group#40;GrpName#41;\" }\n7d549ef8f1abdf52@{ shape: \"text\", label: \"spin_up_node\" } -- \"**#40;4#41;** call_to\" --> 7c90b2efc29436de@{ shape: \"text\", label: \" Module:start#47;2\" }\n7d549ef8f1abdf52@{ shape: \"text\", label: \"spin_up_node\" } -- \"**#40;5#41;** call_to\" --> b610359d7e58d2d3@{ shape: \"text\", label: \"gen_server:call#40;Pid, #123;registered, WsName, Pid#125;#41;,\" }\n020edf6a03f5f1e1@{ shape: \"text\", label: \"node_type_to_module#47;2\" } == \"Module\" ==> 7d549ef8f1abdf52@{ shape: \"text\", label: \"spin_up_node\" }\n771995a172e88ca0@{ shape: \"text\", label: \"get_node_name#47;2\" } == \"GrpName\" ==> 7d549ef8f1abdf52@{ shape: \"text\", label: \"spin_up_node\" }\n7c90b2efc29436de@{ shape: \"text\", label: \" Module:start#47;2\" } == \"Pid\" ==> 7d549ef8f1abdf52@{ shape: \"text\", label: \"spin_up_node\" }\nsubgraph \" \"\n7d549ef8f1abdf52\n020edf6a03f5f1e1\n771995a172e88ca0\n5c278940932c7d45\n7c90b2efc29436de\nb610359d7e58d2d3\nend\n```\n\n## Erlang Code\n\n- [ered_startup.erl](https://github.com/gorenje/erlang-red/blob/82075b02258dfb31a566213c168c890c4564dafd/src/ered_startup.erl)\n- [ered_node_erlsupervisor.erl](https://github.com/gorenje/erlang-red/blob/82075b02258dfb31a566213c168c890c4564dafd/src/nodes/ered_node_erlsupervisor.erl)\n- [ered_node_erlmodule.erl](https://github.com/gorenje/erlang-red/blob/82075b02258dfb31a566213c168c890c4564dafd/src/nodes/ered_node_erlmodule.erl)\n","env":[]},{"id":"e55f8f8977682317","type":"group","z":"2d51a745ca17dc05","name":"ered_startup:create_pids_for_nodes/2","style":{"label":true},"nodes":["cd65242359acde9d","f7b57f5fa2684033","06d71e4d226a0b66","6f2a3728abcf40e8","4b74abd49857f467","993f43fc0fd83c72"],"x":493,"y":377,"w":659,"h":529},{"id":"cb362fe8a180a0e0","type":"group","z":"2d51a745ca17dc05","name":" ","style":{"label":true},"nodes":["7d549ef8f1abdf52","020edf6a03f5f1e1","771995a172e88ca0","5c278940932c7d45","7c90b2efc29436de","b610359d7e58d2d3"],"x":1670.25,"y":384,"w":734.5,"h":484.5},{"id":"cd65242359acde9d","type":"mermaid-flowchart","z":"2d51a745ca17dc05","g":"e55f8f8977682317","name":"ered_startup.erl","shape":"doc","wirecfgs":[{"name":"**(1)** call_to","id":"f7b57f5fa2684033","arrow":"-->"},{"name":"**(5)** call_to","id":"993f43fc0fd83c72","arrow":"-->"},{"name":"**(3)** call_to","id":"6f2a3728abcf40e8","arrow":"-->"},{"name":"**(4)** call_to","id":"4b74abd49857f467","arrow":"-->"},{"name":"**(2)** call_to","id":"06d71e4d226a0b66","arrow":"-->"}],"x":599,"y":418,"wires":[["f7b57f5fa2684033","06d71e4d226a0b66","6f2a3728abcf40e8","4b74abd49857f467","993f43fc0fd83c72"]]},{"id":"f7b57f5fa2684033","type":"mermaid-flowchart","z":"2d51a745ca17dc05","g":"e55f8f8977682317","name":"store_config_nodes/2","shape":"text","wirecfgs":[{"name":"store_config_node","id":"deebe7665f77dc9a","arrow":"-->"}],"x":986,"y":418,"wires":[["deebe7665f77dc9a"]]},{"id":"deebe7665f77dc9a","type":"mermaid-flowchart","z":"2d51a745ca17dc05","name":"ered_config_store \\n <gen_server>","shape":"lin-cyl","wirecfgs":[],"x":1378,"y":418,"wires":[[]]},{"id":"06d71e4d226a0b66","type":"mermaid-flowchart","z":"2d51a745ca17dc05","g":"e55f8f8977682317","name":"install_module_node_code/2","shape":"text","wirecfgs":[{"name":"install/2","id":"b8a1bc7329daec62","arrow":"-->"}],"x":1006,"y":538,"wires":[["b8a1bc7329daec62"]]},{"id":"647f1caf18f4e461","type":"mermaid-flowchart","z":"2d51a745ca17dc05","name":"Outside World","shape":"braces","wirecfgs":[{"name":"create_pids_for_nodes/2","id":"cd65242359acde9d","arrow":"-->"}],"x":285,"y":418,"wires":[["cd65242359acde9d"]]},{"id":"b8a1bc7329daec62","type":"mermaid-flowchart","z":"2d51a745ca17dc05","name":"ered_node_erlmodule","shape":"notch-rect","wirecfgs":[],"x":1388,"y":535,"wires":[[]]},{"id":"6f2a3728abcf40e8","type":"mermaid-flowchart","z":"2d51a745ca17dc05","g":"e55f8f8977682317","name":"extract_supervisors/1","shape":"text","wirecfgs":[{"name":"Supervisors","id":"cd65242359acde9d","arrow":"==>"}],"x":986,"y":658,"wires":[["cd65242359acde9d"]]},{"id":"4b74abd49857f467","type":"mermaid-flowchart","z":"2d51a745ca17dc05","g":"e55f8f8977682317","name":"supervisor_filter_nodes/5","shape":"text","wirecfgs":[{"name":"extract_nodes/2","id":"94123abe4da26501","arrow":"-->"}],"x":996,"y":778,"wires":[["94123abe4da26501"]]},{"id":"993f43fc0fd83c72","type":"mermaid-flowchart","z":"2d51a745ca17dc05","g":"e55f8f8977682317","name":"create_pids_for_nodes/3","shape":"text","wirecfgs":[{"name":"defintion of","id":"fd298b0409083e41","arrow":"--"},{"name":"Pids","id":"647f1caf18f4e461","arrow":"==>"}],"x":1000,"y":865,"wires":[["647f1caf18f4e461"]]},{"id":"fd298b0409083e41","type":"mermaid-flowchart","z":"2d51a745ca17dc05","name":"create_pids_for_nodes/3","shape":"text","wirecfgs":[{"name":"call_to","id":"7d549ef8f1abdf52","arrow":"-->"}],"x":1762.5,"y":247.5,"wires":[["7d549ef8f1abdf52"]]},{"id":"7d549ef8f1abdf52","type":"mermaid-flowchart","z":"2d51a745ca17dc05","g":"cb362fe8a180a0e0","name":"spin_up_node","shape":"text","wirecfgs":[{"name":"Pid","id":"fd298b0409083e41","arrow":"==>"},{"name":"**(5)** call_to","id":"b610359d7e58d2d3","arrow":"-->"},{"name":"**(4)** call_to","id":"7c90b2efc29436de","arrow":"-->"},{"name":"**(2)** call_to","id":"771995a172e88ca0","arrow":"-->"},{"name":"**(3)** call_to","id":"5c278940932c7d45","arrow":"-->"},{"name":"**(1)** call_to","id":"020edf6a03f5f1e1","arrow":"-->"}],"x":1776.25,"y":425,"wires":[["fd298b0409083e41","020edf6a03f5f1e1","771995a172e88ca0","5c278940932c7d45","7c90b2efc29436de","b610359d7e58d2d3"]]},{"id":"020edf6a03f5f1e1","type":"mermaid-flowchart","z":"2d51a745ca17dc05","g":"cb362fe8a180a0e0","name":"node_type_to_module/2","shape":"text","wirecfgs":[{"name":"Module","id":"7d549ef8f1abdf52","arrow":"==>"}],"x":2121.25,"y":425,"wires":[["7d549ef8f1abdf52"]]},{"id":"771995a172e88ca0","type":"mermaid-flowchart","z":"2d51a745ca17dc05","g":"cb362fe8a180a0e0","name":"get_node_name/2","shape":"text","wirecfgs":[{"name":"GrpName","id":"7d549ef8f1abdf52","arrow":"==>"}],"x":2107.5,"y":542.5,"wires":[["7d549ef8f1abdf52"]]},{"id":"5c278940932c7d45","type":"mermaid-flowchart","z":"2d51a745ca17dc05","g":"cb362fe8a180a0e0","name":"clear_pg_group(GrpName)","shape":"text","wirecfgs":[],"x":2140,"y":640,"wires":[[]]},{"id":"7c90b2efc29436de","type":"mermaid-flowchart","z":"2d51a745ca17dc05","g":"cb362fe8a180a0e0","name":" Module:start/2","shape":"text","wirecfgs":[{"name":"Pid","id":"7d549ef8f1abdf52","arrow":"==>"}],"x":2101.25,"y":733.75,"wires":[["7d549ef8f1abdf52"]]},{"id":"b610359d7e58d2d3","type":"mermaid-flowchart","z":"2d51a745ca17dc05","g":"cb362fe8a180a0e0","name":"gen_server:call(Pid, {registered, WsName, Pid}),","shape":"text","wirecfgs":[],"x":2198.75,"y":827.5,"wires":[[]]},{"id":"94123abe4da26501","type":"mermaid-flowchart","z":"2d51a745ca17dc05","name":"Supervisor Module","shape":"notch-rect","wirecfgs":[],"x":1386,"y":777,"wires":[[]]}]