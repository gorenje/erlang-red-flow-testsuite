[{"id":"9576156cd207e309","type":"tab","label":"[.breadboard] mnesia - storing data","disabled":false,"info":"## Mnesia Erlang database\n\n[Mnesia](https://www.erlang.org/doc/apps/mnesia/mnesia.html) database store\n\n## Database\n\nInitial database contains blog pages and authors. This example only uses the authors and is used to show how the http nodes can be used to create a form to enter new authors.\n\n## Interaction\n\n- [Create new author](/9576156cd207e309/author/create)\n- [Show all authors](/9576156cd207e309/authors)\n\n","env":[{"name":"ERED_ONLY","value":"true","type":"bool"},{"name":"ERED_NOT_EUNIT","value":"true","type":"bool"}]},{"id":"102866a4304a7784","type":"group","z":"9576156cd207e309","name":"initialise the database","style":{"label":true},"nodes":["50804fc6eb1c300b","03279e656c6747f3","95724bde53758f55","39ebc238cb30f6e9","1a0859513268ce23"],"x":130,"y":127,"w":980,"h":232.5},{"id":"b371a1107f7cf562","type":"group","z":"9576156cd207e309","name":"web interface","style":{"label":true},"nodes":["6959f5b83d8b68c5","49a48c7c8e037385","38e086a32ad70578","8a6d431d8298019c","72b91c170e81f28a","bb132d770bd782c9","1ae8ab63d6433c15","08afb9fbe7f88b5d","c109a4421e4a8776","61a53bc8aab77aca","accfdf3592e79998"],"x":129,"y":411.5,"w":1200,"h":302.5},{"id":"50804fc6eb1c300b","type":"erlmodule","z":"9576156cd207e309","g":"102866a4304a7784","name":"","module_name":"mnesia_breadboard_9576156cd207e309","code":"-module(mnesia_breadboard_9576156cd207e309).\n\n-export_type([\n  blogpage/0,\n  author/0\n]).\n\n-export([\n   create_tables/0,\n   insert_author/2,\n   get_all_authors/0\n]).\n\n-type id_type() :: integer().\n-type timestamp() :: now | undefined | integer().\n\n-record(dateinfo, {\n  createdat = now :: timestamp(),\n  updatedat :: timestamp()\n}).\n-type dateinfo() :: #dateinfo{}.\n\n-record(author, {\n  id :: id_type(),\n  name :: binary(),\n  email :: binary(),\n  dateinfo :: dateinfo()\n}).\n-type author() :: #author{}.\n\n-record(blogpage, {\n  id :: id_type(),\n  title :: binary(),\n  author_id :: id_type(),\n  published = false :: boolean(),\n  dateinfo :: dateinfo()\n}).\n\n-type blogpage() :: #blogpage{}.\n\ncreate_tables() ->\n  mnesia:start(),\n  \n  mnesia:create_table(blogpage,\n       [{ram_copies, [node()]},\n        {index, [title,author_id]},\n        {attributes, record_info(fields, blogpage)}]),\n  \n  mnesia:create_table(author,\n       [{ram_copies, [node()]},\n        {index, [name]},\n        {attributes, record_info(fields, author)}]).\n\ninsert_author(FirstName, LastName) ->\n  mnesia:transaction(fun () ->\n      Id = mnesia:table_info(author,size),\n      Ts = erlang:system_time(millisecond),\n      mnesia:write(#author{ id = Id, \n                  dateinfo = #dateinfo{ createdat = Ts, updatedat = Ts }, \n                    name = FirstName, \n                      email = LastName })\n  end).\n\nget_all_authors() ->\n  {atomic, R} = mnesia:transaction(fun () ->\n      [mnesia:read(author,D) || D <- mnesia:all_keys(author)]\n  end),\n  lists:flatten(R).\n","x":559,"y":168,"wires":[]},{"id":"03279e656c6747f3","type":"function","z":"9576156cd207e309","g":"102866a4304a7784","name":"create mnesia tables","func":"#{ <<\"payload\">> := Payload } = Msg,\nR = mnesia_breadboard_9576156cd207e309:create_tables(),\nio:format(\"D : ~p\", [R] ),\nMsg#{ <<\"payload\">> =>  R }\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":577,"y":318.5,"wires":[["39ebc238cb30f6e9"]]},{"id":"95724bde53758f55","type":"inject","z":"9576156cd207e309","g":"102866a4304a7784","name":"triggered at flow start","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":true,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":276,"y":226,"wires":[["03279e656c6747f3"]]},{"id":"39ebc238cb30f6e9","type":"debug","z":"9576156cd207e309","g":"102866a4304a7784","name":"debug 6","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":true,"targetType":"full","statusVal":"","statusType":"auto","x":1004,"y":318.5,"wires":[]},{"id":"1a0859513268ce23","type":"erlcaptureio","z":"9576156cd207e309","g":"102866a4304a7784","name":"","scope":["03279e656c6747f3","bb132d770bd782c9","accfdf3592e79998"],"x":588,"y":238,"wires":[["39ebc238cb30f6e9"]]},{"id":"6959f5b83d8b68c5","type":"template","z":"9576156cd207e309","g":"b371a1107f7cf562","name":"","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":" <form method=\"post\" action=\"/9576156cd207e309/author/create\">\n  <label for=\"fname\">First name:</label><br>\n  <input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br>\n  <label for=\"lname\">Last name:</label><br>\n  <input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form> ","output":"str","x":1004,"y":452.5,"wires":[["8a6d431d8298019c"]]},{"id":"49a48c7c8e037385","type":"http in","z":"9576156cd207e309","g":"b371a1107f7cf562","name":"","url":"/9576156cd207e309/author/create","method":"get","upload":false,"swaggerDoc":"","x":305,"y":452.5,"wires":[["6959f5b83d8b68c5"]]},{"id":"38e086a32ad70578","type":"http in","z":"9576156cd207e309","g":"b371a1107f7cf562","name":"","url":"/9576156cd207e309/author/create","method":"post","upload":false,"swaggerDoc":"","x":315,"y":580,"wires":[["bb132d770bd782c9"]]},{"id":"8a6d431d8298019c","type":"http response","z":"9576156cd207e309","g":"b371a1107f7cf562","name":"","statusCode":"","headers":{"content-type":"text/html"},"x":1253,"y":452.5,"wires":[]},{"id":"72b91c170e81f28a","type":"http in","z":"9576156cd207e309","g":"b371a1107f7cf562","name":"","url":"/9576156cd207e309/authors","method":"get","upload":false,"swaggerDoc":"","x":295,"y":673,"wires":[["accfdf3592e79998"]]},{"id":"bb132d770bd782c9","type":"function","z":"9576156cd207e309","g":"b371a1107f7cf562","name":"insert author","func":"#{ <<\"req\">> := #{ <<\"formdata\">> := #{ <<\"fname\">> := FirstName, <<\"lname\">> := LastName }}} = Msg,\n\nR = mnesia_breadboard_9576156cd207e309:insert_author( FirstName, LastName ),\n\nio:format(\"~p\",[R]),\n\nMsg#{<<\"payload\">> => R }\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":614,"y":580,"wires":[["08afb9fbe7f88b5d"]]},{"id":"1ae8ab63d6433c15","type":"template","z":"9576156cd207e309","g":"b371a1107f7cf562","name":"","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"Success!\n<p>\nSee all <a href=\"/9576156cd207e309/authors\">authors</a>.","output":"str","x":1004,"y":518,"wires":[["8a6d431d8298019c"]]},{"id":"08afb9fbe7f88b5d","type":"switch","z":"9576156cd207e309","g":"b371a1107f7cf562","name":"","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"$erl(\"{atomic,ok}\")","vt":"jsonata"},{"t":"else"}],"checkall":"true","repair":false,"outputs":2,"x":800,"y":580,"wires":[["1ae8ab63d6433c15"],["c109a4421e4a8776"]]},{"id":"c109a4421e4a8776","type":"template","z":"9576156cd207e309","g":"b371a1107f7cf562","name":"","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"unknown","output":"str","x":1004,"y":587,"wires":[["8a6d431d8298019c"]]},{"id":"61a53bc8aab77aca","type":"template","z":"9576156cd207e309","g":"b371a1107f7cf562","name":"","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<ul>\n{{ #payload }}\n<li>{{ index }}. {{ name }} {{lastname }} {{ ts }}</li>\n{{ /payload }}\n</ul>\n\n<a href=\"/9576156cd207e309/author/create\">Create Author</a>\n","output":"str","x":1004,"y":672,"wires":[["8a6d431d8298019c"]]},{"id":"accfdf3592e79998","type":"function","z":"9576156cd207e309","g":"b371a1107f7cf562","name":"read all authors","func":"Authors = mnesia_breadboard_9576156cd207e309:get_all_authors(),\n\nR = [\n      #{ <<\"name\">> => Name, <<\"lastname\">> => LastName, <<\"index\">> => Idx, <<\"ts\">> => CTs} \n      || {author, Idx, Name, LastName, {dateinfo, CTs, _UTs}} <- Authors \n],\n\nMsg#{<<\"payload\">> =>  R}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":622.5,"y":673,"wires":[["61a53bc8aab77aca"]]}]