[{"id":"d86dba2bb81b4770","type":"tab","label":"[.core] add some alias nodes","disabled":false,"info":"## Creating alias nodes\n\nSee [forum discussion](https://discourse.nodered.org/t/alias-nodes-redefine-default-settings-as-new-nodes/98137) for more details.\n","env":[{"name":"ERED_NOT_EUNIT","type":"bool","value":"true"}]},{"id":"3c6ad9ab45c8676b","type":"ClientCode","z":"d86dba2bb81b4770","name":"debug count messages","clientcode":"((newType) => {\n\n    // each node type needs a nodeset, clone that too\n    let nodeset = RED.nodes.registry.getNodeSetForType(\"debug\");\n\n    nodeset.id = \"node-red/\" + newType\n    nodeset.types = [newType]\n\n    RED.nodes.registry.addNodeSet(nodeset)\n\n    // unlink the object from the realDebug node\n    let theRealDebug = RED.nodes.registry.getNodeType(\"debug\")\n    let obj = JSON.parse(JSON.stringify(RED.nodes.registry.getNodeType(\"debug\")))\n\n    // new default values go here.\n    obj.defaults.complete.value = \"payload\"\n    obj.defaults.statusType.value = \"counter\"\n    obj.defaults.statusVal.value = \"\"\n    obj.defaults.tostatus.value = true\n    obj.defaults.console.value = false\n    obj.defaults.tosidebar.value = false\n\n    obj.category = 'alias node'\n    \n    // define a new type - not optimal\n    obj.type = newType;\n\n    // basic functionality required by the node before it\n    // changes its type.\n    obj.label = theRealDebug.label;\n    obj.labelStyle = theRealDebug.labelStyle;\n    obj.oneditprepare = theRealDebug.oneditprepare;\n    obj.oneditsave = theRealDebug.oneditsave;\n    obj.button = theRealDebug.button;\n\n    obj.onadd = function() {\n        // change the type back to the original type \n        // when node is added to the workspace \n        this.type = 'debug'; \n        theRealDebug.onadd.call(this);\n    }\n    \n    RED.nodes.registry.registerNodeType(newType, obj)\n})(msg.newTypeName);\n\nnode.send(msg)\n\n\n\n","format":"javascript","x":863,"y":367,"wires":[[]]},{"id":"d3441e94e864191f","type":"inject","z":"d86dba2bb81b4770","name":"","props":[],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":176,"y":219,"wires":[["05c6f4c2d704ecf9","b421c9da61623aef","37ddfb3ddf5c48f8","b8595e18c202d692"]]},{"id":"05c6f4c2d704ecf9","type":"change","z":"d86dba2bb81b4770","name":"","rules":[{"p":"newTypeName","pt":"msg","t":"set","to":"debug-msg-counter","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":508,"y":343,"wires":[["3c6ad9ab45c8676b"]]},{"id":"ab31a316793ff615","type":"ClientCode","z":"d86dba2bb81b4770","name":"debug entire message","clientcode":"((newType) => {\n\n    // each node type needs a nodeset, clone that too\n    let nodeset = RED.nodes.registry.getNodeSetForType(\"debug\");\n\n    nodeset.id = \"node-red/\" + newType\n    nodeset.types = [newType]\n\n    RED.nodes.registry.addNodeSet(nodeset)\n\n    // unlink the object from the realDebug node\n    let theRealDebug = RED.nodes.registry.getNodeType(\"debug\")\n    let obj = JSON.parse(JSON.stringify(RED.nodes.registry.getNodeType(\"debug\")))\n\n    // new default values go here.\n    obj.defaults.complete.value = true\n    obj.defaults.targetType.value = \"full\"\n\n    obj.category = 'alias node'\n    \n    // define a new type - not optimal\n    obj.type = newType;\n\n    // basic functionality required by the node before it\n    // changes its type.\n    obj.label = theRealDebug.label;\n    obj.labelStyle = theRealDebug.labelStyle;\n    obj.oneditprepare = theRealDebug.oneditprepare;\n    obj.oneditsave = theRealDebug.oneditsave;\n\n    obj.onadd = function() {\n        // change the type back to the original type \n        // when node is added to the workspace \n        this.type = 'debug'; \n        this.targetType = \"full\";\n        this.complete = true;\n        theRealDebug.onadd.call(this);\n    }\n    \n    RED.nodes.registry.registerNodeType(newType, obj)\n})(msg.newTypeName);\n\nnode.send(msg)","format":"javascript","x":853,"y":518,"wires":[[]]},{"id":"ba0b01c4fbcf1fa0","type":"ClientCode","z":"d86dba2bb81b4770","name":"join on specific number of messages","clientcode":"((newType) => {\n\n    let copyThisType = \"join\"\n\n    // each node type needs a nodeset, clone that too\n    let nodeset = RED.nodes.registry.getNodeSetForType(copyThisType);\n\n    nodeset.id = \"node-red/\" + newType\n    nodeset.types = [newType]\n\n    RED.nodes.registry.addNodeSet(nodeset)\n\n    // unlink the object from the realDebug node\n    let theRealDeal = RED.nodes.registry.getNodeType(copyThisType)\n    let obj = JSON.parse(JSON.stringify(RED.nodes.registry.getNodeType(copyThisType)))\n\n    // new default values go here.\n    obj.defaults.propertyType = { value: \"full\" }\n    obj.defaults.build = { value: \"array\" }\n    obj.defaults.mode = { value: \"custom\" }\n    obj.defaults.count = { value: \"1\" }\n\n    obj.category = \"alias node\"\n    \n    // define a new type - not optimal\n    obj.type = newType;\n\n    obj.label = theRealDeal.label;\n    obj.labelStyle = theRealDeal.labelStyle;\n\n    obj.onadd = function() { \n        this.type = copyThisType; \n    }\n\n    obj.oneditprepare = theRealDeal.oneditprepare;\n    obj.oneditsave = theRealDeal.oneditsave;\n    obj.oneditresize = theRealDeal.oneditresize;\n    obj.onpaletteadd = undefined;\n    obj.onpaletteremove = undefined;\n\n    RED.nodes.registry.registerNodeType(newType, obj)\n})(msg.newTypeName);\n\nnode.send(msg)","format":"javascript","x":903,"y":669,"wires":[[]]},{"id":"dd76ff6b1e901620","type":"ClientCode","z":"d86dba2bb81b4770","name":"switch node stop after first match","clientcode":"((newType) => {\n\n    let copyThisType = \"switch\"\n\n    // each node type needs a nodeset, clone that too\n    let nodeset = RED.nodes.registry.getNodeSetForType(copyThisType);\n\n    nodeset.id = \"node-red/\" + newType\n    nodeset.types = [newType]\n\n    RED.nodes.registry.addNodeSet(nodeset)\n\n    // unlink the object from the realDebug node\n    let theRealDeal = RED.nodes.registry.getNodeType(copyThisType)\n    let obj = JSON.parse(JSON.stringify(RED.nodes.registry.getNodeType(copyThisType)))\n\n    // new default values go here.\n    obj.defaults.checkall.value = \"false\"\n\n    obj.category = 'alias node'\n    \n    // define a new type - not optimal\n    obj.type = newType;\n\n    obj.label = theRealDeal.label;\n    obj.labelStyle = theRealDeal.labelStyle;\n\n    obj.onadd = function() { \n        this.type = copyThisType; \n    }\n\n    obj.oneditprepare = theRealDeal.oneditprepare;\n    obj.oneditsave = theRealDeal.oneditsave;\n    obj.oneditresize = theRealDeal.oneditresize;\n    obj.onpaletteadd = undefined;\n    obj.onpaletteremove = undefined;\n\n    RED.nodes.registry.registerNodeType(newType, obj)\n})(msg.newTypeName);\n\nnode.send(msg)","format":"javascript","x":893,"y":820,"wires":[[]]},{"id":"b421c9da61623aef","type":"change","z":"d86dba2bb81b4770","name":"","rules":[{"p":"newTypeName","pt":"msg","t":"set","to":"debug-all","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":508,"y":461,"wires":[["ab31a316793ff615"]]},{"id":"37ddfb3ddf5c48f8","type":"change","z":"d86dba2bb81b4770","name":"","rules":[{"p":"newTypeName","pt":"msg","t":"set","to":"\"test-first-\" & $random()","tot":"jsonata"},{"p":"newTypeName","pt":"msg","t":"set","to":"join-num-messages","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":478,"y":579,"wires":[["ba0b01c4fbcf1fa0"]]},{"id":"b8595e18c202d692","type":"change","z":"d86dba2bb81b4770","name":"","rules":[{"p":"newTypeName","pt":"msg","t":"set","to":"\"switch-stop-first-\" & $random()","tot":"jsonata"},{"p":"newTypeName","pt":"msg","t":"set","to":"switch-stop-first","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":478,"y":697,"wires":[["dd76ff6b1e901620"]]}]