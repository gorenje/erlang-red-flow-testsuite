[{"id":"442b3bf0d630e21d","type":"tab","label":"[function] function and module work together","disabled":false,"info":"## Function & Module = Working\n\nEnsure that a module can be defined in a module and then be used in a function node.\n\n## Module node\n\nA module node can be used to defined a complete Erlang module, i.e., something like \n\n```erlang\n-module(ered_http_nodered_inject_node_button_handler).\n\n-behaviour(cowboy_rest).\n\n-export([\n    init/2,\n    allowed_methods/2,\n    content_types_accepted/2,\n    handle_json_body/2,\n    format_error/2\n]).\n\n-import(ered_nodes, [\n    nodeid_to_pid/2\n]).\n-import(ered_nodered_comm, [\n    websocket_name_from_request/1\n]).\n-import(ered_messages, [\n    create_outgoing_msg/1\n]).\n\ninit(Req, State) ->\n    {cowboy_rest, Req, State}.\n\nallowed_methods(Req, State) ->\n    {[<<\"POST\">>], Req, State}.\n\ncontent_types_accepted(Req, State) ->\n    {\n        [\n            {<<\"application/json\">>, handle_json_body},\n            {<<\"application/json; charset=utf-8\">>, handle_json_body}\n        ],\n        Req,\n        State\n    }.\n\nhandle_json_body(Req, State) ->\n    Resp = cowboy_req:set_resp_body(<<\"OK\">>, Req),\n    WsName = websocket_name_from_request(Req),\n\n    case cowboy_req:binding(nodeid, Req) of\n        undefined ->\n            ok;\n        IdStr ->\n            case nodeid_to_pid(WsName, IdStr) of\n                {ok, Pid} ->\n                    gen_server:cast(Pid, create_outgoing_msg(WsName));\n                {error, _} ->\n                    ignore\n            end\n    end,\n\n    {true, Resp, State}.\n\nformat_error(Reason, Req) ->\n    {\n        [\n            {<<\"error\">>, <<\"bad_request\">>},\n            {<<\"reason\">>, Reason}\n        ],\n        Req\n    }.\n```\n\ncan be defined in the module node and used in the functon node.\n\n## Code updates\n\nModule code is reload each time the flow is deployed to the server, thus updates to the module are immediately available on the server.\n\nThe advantage is that all code related to the application can be stored in the flow data and organised as a flow.","env":[]},{"id":"c4efa06c8868a6ac","type":"erlmodule","z":"442b3bf0d630e21d","name":"","module_name":"erlang_red_test_module_add","code":"-module(erlang_red_test_module_add).\n\n-export([add/2]).\n\nadd(V1,V2) when is_number(V1), is_number(V2) ->\n    V1 + V2;\nadd(_,_) ->\n    infinity.\n\n","x":218,"y":98,"wires":[]},{"id":"f11048ace112cc59","type":"erlmodule","z":"442b3bf0d630e21d","name":"","module_name":"erlang_red_test_module_subtract","code":"-module(erlang_red_test_module_subtract).\n\n-export([subtract/2]).\n\nsubtract(V1,V2) when is_number(V1), is_number(V2) ->\n    V1 - V2;\nsubtract(_,_) ->\n    infinity.\n\n","x":232,"y":152,"wires":[]},{"id":"bcee04fb6846c14a","type":"function","z":"442b3bf0d630e21d","name":"function 1","func":"Msg#{ <<\"payload\">> => erlang_red_test_module_add:add(maps:get(<<\"payload\">>,Msg), maps:get(<<\"value2\">>,Msg)) }\n\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":297,"y":531,"wires":[["9a932875c4eed899","beb2768ba33c85f3"]]},{"id":"aeedbfdc6212b89d","type":"inject","z":"442b3bf0d630e21d","name":"","props":[{"p":"payload"},{"p":"value2","v":"231","vt":"num"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"111","payloadType":"num","x":132,"y":427,"wires":[["bcee04fb6846c14a","0d5e040ea5a93d79"]]},{"id":"ac8cac1caf6a3507","type":"ut-assert-values","z":"442b3bf0d630e21d","name":"","rules":[{"p":"payload","pt":"msg","t":"eql","to":"-2033","tot":"num"}],"x":899,"y":657.5,"wires":[[]]},{"id":"9a932875c4eed899","type":"function","z":"442b3bf0d630e21d","name":"function 2","func":"Msg#{ <<\"payload\">> => erlang_red_test_module_subtract:subtract(maps:get(<<\"payload\">>,Msg), 1243) }\n\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":490,"y":635,"wires":[["8d5da91051689370","b3e32834498fdc02"]]},{"id":"8d5da91051689370","type":"function","z":"442b3bf0d630e21d","name":"function 3","func":"Msg#{ <<\"payload\">> => erlang_red_test_module_add:add(\n                         erlang_red_test_module_subtract:subtract(\n                                  maps:get(<<\"payload\">>, Msg), \n                                  1243\n                         ), \n                         111) \n}\n\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":665,"y":744,"wires":[["ac8cac1caf6a3507"]]},{"id":"b3e32834498fdc02","type":"ut-assert-values","z":"442b3bf0d630e21d","name":"","rules":[{"p":"payload","pt":"msg","t":"eql","to":"-901","tot":"num"}],"x":759,"y":541,"wires":[[]]},{"id":"beb2768ba33c85f3","type":"ut-assert-values","z":"442b3bf0d630e21d","name":"","rules":[{"p":"payload","pt":"msg","t":"eql","to":"342","tot":"num"}],"x":592,"y":428,"wires":[[]]},{"id":"0d5e040ea5a93d79","type":"ut-assert-values","z":"442b3bf0d630e21d","name":"","rules":[{"p":"payload","pt":"msg","t":"eql","to":"111","tot":"num"}],"x":429,"y":295,"wires":[[]]}]