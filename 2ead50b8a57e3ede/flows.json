[{"id":"2ead50b8a57e3ede","type":"tab","label":"[captureio] capture io from gen_server behaviour","disabled":false,"info":"","env":[]},{"id":"a37b67322922c79e","type":"erlgenserver","z":"2ead50b8a57e3ede","name":"","use_module_name_addressing":false,"scope":["d78838f34642a361"],"x":677,"y":390.5,"wires":[[]]},{"id":"d78838f34642a361","type":"erlmodule","z":"2ead50b8a57e3ede","name":"","module_name":"captureio_test_genserver_2ead50b8a57e3ede","code":"-module(captureio_test_genserver_2ead50b8a57e3ede).\n\n%%\n%% APIs: https://www.erlang.org/doc/apps/stdlib/gen_server.html\n%%\n\n-behaviour(gen_server).\n\n-export([\n    start_link/0,\n    init/1,\n    handle_call/3,\n    handle_cast/2,\n    handle_info/2,\n    code_change/3,\n    terminate/2,\n    stop/0\n]).\n\n%%\n%% Externer exports\n-export([\n   increment/0,\n   decrement/0,\n   get_counter/0,\n   set_counter/1\n]).\n\n%%\n%% External APIs\nincrement() ->\n   gen_server:call(?MODULE, increment).\n\ndecrement() ->\n   gen_server:call(?MODULE, decrement).\n\nget_counter() ->\n   gen_server:call(?MODULE, get_counter).\n\nset_counter(Value) ->\n   gen_server:call(?MODULE, {set_counter, Value}).\n\n%%\n%%\nstart_link() ->\n    gen_server:start_link({local, ?MODULE}, ?MODULE, #{counter => 0}, []).\n\ninit(Args) ->\n    {ok, Args#{ counter => 1 }}.\n\nstop() ->\n    gen_server:cast(?MODULE, stop).\n\nterminate(normal, _State) ->\n    ok;\nterminate(_Event, _State) ->\n    ok.\n\ncode_change(_OldVersion, State, _Extra) ->\n    {ok, State}.\n\n%%\n%%\nhandle_call(increment, _From, #{ counter := Counter } = State) ->\n    {reply, ok, State#{ counter => Counter + 1}};\n\nhandle_call(decrement, _From, #{ counter := Counter } = State) ->\n    {reply, ok, State#{ counter => Counter - 1}};\n\nhandle_call(get_counter, _From, #{ counter := Counter } = State) ->\n    io:format(\"get counter was called\"),\n    {reply, Counter, State};\n\nhandle_call({set_counter, Payload}, _From, State) when is_integer(Payload) ->\n    {reply, ok, State#{ counter => Payload}};\n\nhandle_call({set_counter, Payload}, _From, State) when is_binary(Payload); is_list(Payload) ->\n   case string:to_integer(Payload) of\n      {error, _} ->\n          {reply, not_integer, State};\n      {Integer, _} ->\n          {reply, ok, State#{ counter => Integer}}\n   end;\n\nhandle_call({set_counter, _Payload}, _From, State) ->\n    {reply, not_supported, State};\n\nhandle_call(_Msg, _From, State) ->\n    {reply, ok, State}.\n\n%%\n%%\nhandle_cast(stop, State) ->\n    {stop, normal, State};\nhandle_cast(_Msg, State) ->\n    {noreply, State}.\n\n%%\n%%\nhandle_info(_, State) ->\n    {noreply, State}.\n\n","x":671,"y":318,"wires":[]},{"id":"125b75be8c2debbd","type":"inject","z":"2ead50b8a57e3ede","name":"","props":[{"p":"module","v":"captureio_test_genserver_2ead50b8a57e3ede","vt":"str"},{"p":"call","v":"get_counter","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":394,"y":504,"wires":[["a37b67322922c79e"]]},{"id":"45e0779307727834","type":"erlcaptureio","z":"2ead50b8a57e3ede","name":"","scope":["a37b67322922c79e"],"x":731,"y":523,"wires":[["30ed4b216fb5f211"]]},{"id":"30ed4b216fb5f211","type":"ut-assert-values","z":"2ead50b8a57e3ede","name":"","ignore_failure_if_succeed":false,"rules":[{"t":"eql","p":"captureio.source.id","pt":"msg","to":"a37b67322922c79e","tot":"str"},{"t":"eql","p":"payload","pt":"msg","to":"get counter was called","tot":"str"}],"x":971,"y":494,"wires":[[]]}]